"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effect";
exports.ids = ["vendor-chunks/effect"];
exports.modules = {

/***/ "(ssr)/./node_modules/effect/dist/esm/Context.js":
/*!*************************************************!*\
  !*** ./node_modules/effect/dist/esm/Context.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericTag: () => (/* binding */ GenericTag),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unsafeMake: () => (/* binding */ unsafeMake)\n/* harmony export */ });\n/* harmony import */ var _internal_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/context.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/context.js\");\n\nconst TagTypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TagTypeId;\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nconst GenericTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeGenericTag;\nconst TypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * @since 2.0.0\n * @category constructors\n */\nconst unsafeMake = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeContext;\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nconst isContext = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isContext;\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nconst isTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isTag;\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nconst empty = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.empty;\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nconst make = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.make;\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nconst add = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nconst get = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.get;\n/**\n * Get a service from the context that corresponds to the given tag, or\n * use the fallback value.\n *\n * @since 3.7.0\n * @category getters\n */\nconst getOrElse = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.getOrElse;\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nconst unsafeGet = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.unsafeGet;\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nconst getOption = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.getOption;\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nconst merge = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.merge;\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nconst pick = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.pick;\n/**\n * @since 2.0.0\n */\nconst omit = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.omit;\n/**\n * @since 2.0.0\n * @category constructors\n */\nconst Tag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.Tag;\n//# sourceMappingURL=Context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Effectable.js":
/*!****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Effectable.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralClass: () => (/* binding */ StructuralClass),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype)\n/* harmony export */ });\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst EffectTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst StreamTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StreamTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst SinkTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.SinkTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst ChannelTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.ChannelTypeId;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst EffectPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst CommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.CommitPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst StructuralCommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralCommitPrototype;\nconst Base = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.Base;\nconst StructuralBase = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralBase;\n/**\n * @since 2.0.0\n * @category constructors\n */\nclass Class extends Base {}\n/**\n * @since 2.0.0\n * @category constructors\n */\nclass StructuralClass extends StructuralBase {}\n//# sourceMappingURL=Effectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQixpRUFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsaUVBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLCtEQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQixrRUFBc0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3QkFBd0Isb0VBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0JBQXdCLG9FQUF3QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNPLGtDQUFrQyw4RUFBa0M7QUFDM0UsYUFBYSx5REFBYTtBQUMxQix1QkFBdUIsbUVBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vRWZmZWN0YWJsZS5qcz8xM2IyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGludGVybmFsIGZyb20gXCIuL2ludGVybmFsL2VmZmVjdGFibGUuanNcIjtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFR5cGVJZCA9IGludGVybmFsLkVmZmVjdFR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbVR5cGVJZCA9IGludGVybmFsLlN0cmVhbVR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFNpbmtUeXBlSWQgPSBpbnRlcm5hbC5TaW5rVHlwZUlkO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSB0eXBlIGlkc1xuICovXG5leHBvcnQgY29uc3QgQ2hhbm5lbFR5cGVJZCA9IGludGVybmFsLkNoYW5uZWxUeXBlSWQ7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHByb3RvdHlwZXNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFByb3RvdHlwZSA9IGludGVybmFsLkVmZmVjdFByb3RvdHlwZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgcHJvdG90eXBlc1xuICovXG5leHBvcnQgY29uc3QgQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuQ29tbWl0UHJvdG90eXBlO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBwcm90b3R5cGVzXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuU3RydWN0dXJhbENvbW1pdFByb3RvdHlwZTtcbmNvbnN0IEJhc2UgPSBpbnRlcm5hbC5CYXNlO1xuY29uc3QgU3RydWN0dXJhbEJhc2UgPSBpbnRlcm5hbC5TdHJ1Y3R1cmFsQmFzZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzcyBleHRlbmRzIEJhc2Uge31cbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmFsQ2xhc3MgZXh0ZW5kcyBTdHJ1Y3R1cmFsQmFzZSB7fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWZmZWN0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Either.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Either.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   filterOrLeft: () => (/* binding */ filterOrLeft),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapLeft: () => (/* binding */ mapLeft),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst TypeId = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst right = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.right;\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst left = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.left;\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNullable) => self == null ? left(onNullable(self)) : right(self));\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromOption = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.fromOption;\nconst try_ = evaluate => {\n  if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(evaluate)) {\n    try {\n      return right(evaluate());\n    } catch (e) {\n      return left(e);\n    }\n  } else {\n    try {\n      return right(evaluate.try());\n    } catch (e) {\n      return left(evaluate.catch(e));\n    }\n  }\n};\n\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEither = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isEither;\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isLeft;\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isRight;\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nconst getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getLeft;\n/**\n * @category equivalence\n * @since 2.0.0\n */\nconst getEquivalence = ({\n  left,\n  right\n}) => _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y) => isLeft(x) ? isLeft(y) && left(x.left, y.left) : isRight(y) && right(x.right, y.right));\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapBoth = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right)));\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isLeft(self) ? left(f(self.left)) : right(self.right));\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isRight(self) ? right(f(self.right)) : left(self.left));\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? onLeft(self.left) : onRight(self.right));\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nconst liftPredicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (a, predicate, orLeftWith) => predicate(a) ? right(a) : left(orLeftWith(a)));\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nconst filterOrLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, orLeftWith) => flatMap(self, r => predicate(r) ? right(r) : left(orLeftWith(r))));\n/**\n * @category getters\n * @since 2.0.0\n */\nconst merge = /*#__PURE__*/match({\n  onLeft: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n  onRight: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n});\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft) => isLeft(self) ? onLeft(self.left) : self.right);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrNull = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrUndefined = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrThrowWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft) => {\n  if (isRight(self)) {\n    return self.right;\n  }\n  throw onLeft(self.left);\n});\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a Left\"));\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isLeft(self) ? that(self.left) : right(self.right));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isLeft(self) ? left(self.left) : f(self.right));\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => {\n  const b = (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(f) ? f(a) : f;\n  return isEither(b) ? b : right(b);\n}));\n/**\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f) => flatMap(self, r => map(that, r2 => f(r, r2))));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst ap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nconst all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const e of input) {\n      if (isLeft(e)) {\n        return e;\n      }\n      out.push(e.right);\n    }\n    return right(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const e = input[key];\n    if (isLeft(e)) {\n      return e;\n    }\n    out[key] = e.right;\n  }\n  return right(out);\n};\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nconst flip = self => isLeft(self) ? right(self.left) : left(self.right);\nconst adapter = /*#__PURE__*/_Utils_js__WEBPACK_IMPORTED_MODULE_4__.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nconst gen = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0]);\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return right(state.value);\n  } else {\n    let current = state.value;\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_4__.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = _Utils_js__WEBPACK_IMPORTED_MODULE_4__.yieldWrapGet(current);\n    }\n    if (isLeft(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.right);\n      if (!state.done) {\n        current = state.value;\n        if (_Utils_js__WEBPACK_IMPORTED_MODULE_4__.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = _Utils_js__WEBPACK_IMPORTED_MODULE_4__.yieldWrapGet(current);\n        }\n        if (isLeft(current)) {\n          return current;\n        }\n      }\n    }\n    return right(state.value);\n  }\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst Do = /*#__PURE__*/right({});\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bindTo(map);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.let_(map);\n\n//# sourceMappingURL=Either.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Encoding.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Encoding.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeException: () => (/* binding */ DecodeException),\n/* harmony export */   DecodeExceptionTypeId: () => (/* binding */ DecodeExceptionTypeId),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   decodeBase64String: () => (/* binding */ decodeBase64String),\n/* harmony export */   decodeBase64Url: () => (/* binding */ decodeBase64Url),\n/* harmony export */   decodeBase64UrlString: () => (/* binding */ decodeBase64UrlString),\n/* harmony export */   decodeHex: () => (/* binding */ decodeHex),\n/* harmony export */   decodeHexString: () => (/* binding */ decodeHexString),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   encodeBase64Url: () => (/* binding */ encodeBase64Url),\n/* harmony export */   encodeHex: () => (/* binding */ encodeHex),\n/* harmony export */   isDecodeException: () => (/* binding */ isDecodeException)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/encoding/base64.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\");\n/* harmony import */ var _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/encoding/base64Url.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js\");\n/* harmony import */ var _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/encoding/common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n/* harmony import */ var _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/encoding/hex.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js\");\n/**\n * This module provides encoding & decoding functionality for:\n *\n * - base64 (RFC4648)\n * - base64 (URL)\n * - hex\n *\n * @since 2.0.0\n */\n\n\n\n\n\n/**\n * Encodes the given value into a base64 (RFC4648) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nconst encodeBase64 = input => typeof input === \"string\" ? _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(input);\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeBase64 = str => _internal_encoding_base64_js__WEBPACK_IMPORTED_MODULE_0__.decode(str);\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeBase64String = str => _Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeBase64(str), _ => _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * Encodes the given value into a base64 (URL) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nconst encodeBase64Url = input => typeof input === \"string\" ? _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.encode(input);\n/**\n * Decodes a base64 (URL) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeBase64Url = str => _internal_encoding_base64Url_js__WEBPACK_IMPORTED_MODULE_3__.decode(str);\n/**\n * Decodes a base64 (URL) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeBase64UrlString = str => _Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeBase64Url(str), _ => _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * Encodes the given value into a hex `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nconst encodeHex = input => typeof input === \"string\" ? _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.encode(_internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(input)) : _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.encode(input);\n/**\n * Decodes a hex encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeHex = str => _internal_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.decode(str);\n/**\n * Decodes a hex encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nconst decodeHexString = str => _Either_js__WEBPACK_IMPORTED_MODULE_2__.map(decodeHex(str), _ => _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_));\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst DecodeExceptionTypeId = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeExceptionTypeId;\n/**\n * Creates a checked exception which occurs when decoding fails.\n *\n * @since 2.0.0\n * @category errors\n */\nconst DecodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException;\n/**\n * Returns `true` if the specified value is an `DecodeException`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nconst isDecodeException = _internal_encoding_common_js__WEBPACK_IMPORTED_MODULE_1__.isDecodeException;\n//# sourceMappingURL=Encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NDO0FBQ2tCO0FBQ007QUFDTjtBQUNOO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBEQUEwRCxnRUFBYSxDQUFDLGlFQUFjLGtCQUFrQixnRUFBYTtBQUM1SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsZ0VBQWE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sa0NBQWtDLDJDQUFVLHlCQUF5QixpRUFBYztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2REFBNkQsbUVBQWdCLENBQUMsaUVBQWMsa0JBQWtCLG1FQUFnQjtBQUNySTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0IsbUVBQWdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFDQUFxQywyQ0FBVSw0QkFBNEIsaUVBQWM7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sdURBQXVELDZEQUFVLENBQUMsaUVBQWMsa0JBQWtCLDZEQUFVO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlCQUF5Qiw2REFBVTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0IsMkNBQVUsc0JBQXNCLGlFQUFjO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLCtFQUE0QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3QkFBd0IseUVBQXNCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQiwyRUFBd0I7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vRW5jb2RpbmcuanM/NGI0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGVuY29kaW5nICYgZGVjb2RpbmcgZnVuY3Rpb25hbGl0eSBmb3I6XG4gKlxuICogLSBiYXNlNjQgKFJGQzQ2NDgpXG4gKiAtIGJhc2U2NCAoVVJMKVxuICogLSBoZXhcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRWl0aGVyIGZyb20gXCIuL0VpdGhlci5qc1wiO1xuaW1wb3J0ICogYXMgQmFzZTY0IGZyb20gXCIuL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NC5qc1wiO1xuaW1wb3J0ICogYXMgQmFzZTY0VXJsIGZyb20gXCIuL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NFVybC5qc1wiO1xuaW1wb3J0ICogYXMgQ29tbW9uIGZyb20gXCIuL2ludGVybmFsL2VuY29kaW5nL2NvbW1vbi5qc1wiO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gXCIuL2ludGVybmFsL2VuY29kaW5nL2hleC5qc1wiO1xuLyoqXG4gKiBFbmNvZGVzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgYmFzZTY0IChSRkM0NjQ4KSBgc3RyaW5nYC5cbiAqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlQmFzZTY0ID0gaW5wdXQgPT4gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gQmFzZTY0LmVuY29kZShDb21tb24uZW5jb2Rlci5lbmNvZGUoaW5wdXQpKSA6IEJhc2U2NC5lbmNvZGUoaW5wdXQpO1xuLyoqXG4gKiBEZWNvZGVzIGEgYmFzZTY0IChSRkM0NjQ4KSBlbmNvZGVkIGBzdHJpbmdgIGludG8gYSBgVWludDhBcnJheWAuXG4gKlxuICogQGNhdGVnb3J5IGRlY29kaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZUJhc2U2NCA9IHN0ciA9PiBCYXNlNjQuZGVjb2RlKHN0cik7XG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgKFJGQzQ2NDgpIGVuY29kZWQgYHN0cmluZ2AgaW50byBhIFVURi04IGBzdHJpbmdgLlxuICpcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVCYXNlNjRTdHJpbmcgPSBzdHIgPT4gRWl0aGVyLm1hcChkZWNvZGVCYXNlNjQoc3RyKSwgXyA9PiBDb21tb24uZGVjb2Rlci5kZWNvZGUoXykpO1xuLyoqXG4gKiBFbmNvZGVzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgYmFzZTY0IChVUkwpIGBzdHJpbmdgLlxuICpcbiAqIEBjYXRlZ29yeSBlbmNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVCYXNlNjRVcmwgPSBpbnB1dCA9PiB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgPyBCYXNlNjRVcmwuZW5jb2RlKENvbW1vbi5lbmNvZGVyLmVuY29kZShpbnB1dCkpIDogQmFzZTY0VXJsLmVuY29kZShpbnB1dCk7XG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgKFVSTCkgZW5jb2RlZCBgc3RyaW5nYCBpbnRvIGEgYFVpbnQ4QXJyYXlgLlxuICpcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVCYXNlNjRVcmwgPSBzdHIgPT4gQmFzZTY0VXJsLmRlY29kZShzdHIpO1xuLyoqXG4gKiBEZWNvZGVzIGEgYmFzZTY0IChVUkwpIGVuY29kZWQgYHN0cmluZ2AgaW50byBhIFVURi04IGBzdHJpbmdgLlxuICpcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVCYXNlNjRVcmxTdHJpbmcgPSBzdHIgPT4gRWl0aGVyLm1hcChkZWNvZGVCYXNlNjRVcmwoc3RyKSwgXyA9PiBDb21tb24uZGVjb2Rlci5kZWNvZGUoXykpO1xuLyoqXG4gKiBFbmNvZGVzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgaGV4IGBzdHJpbmdgLlxuICpcbiAqIEBjYXRlZ29yeSBlbmNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVIZXggPSBpbnB1dCA9PiB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgPyBIZXguZW5jb2RlKENvbW1vbi5lbmNvZGVyLmVuY29kZShpbnB1dCkpIDogSGV4LmVuY29kZShpbnB1dCk7XG4vKipcbiAqIERlY29kZXMgYSBoZXggZW5jb2RlZCBgc3RyaW5nYCBpbnRvIGEgYFVpbnQ4QXJyYXlgLlxuICpcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVIZXggPSBzdHIgPT4gSGV4LmRlY29kZShzdHIpO1xuLyoqXG4gKiBEZWNvZGVzIGEgaGV4IGVuY29kZWQgYHN0cmluZ2AgaW50byBhIFVURi04IGBzdHJpbmdgLlxuICpcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVIZXhTdHJpbmcgPSBzdHIgPT4gRWl0aGVyLm1hcChkZWNvZGVIZXgoc3RyKSwgXyA9PiBDb21tb24uZGVjb2Rlci5kZWNvZGUoXykpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xzXG4gKi9cbmV4cG9ydCBjb25zdCBEZWNvZGVFeGNlcHRpb25UeXBlSWQgPSBDb21tb24uRGVjb2RlRXhjZXB0aW9uVHlwZUlkO1xuLyoqXG4gKiBDcmVhdGVzIGEgY2hlY2tlZCBleGNlcHRpb24gd2hpY2ggb2NjdXJzIHdoZW4gZGVjb2RpbmcgZmFpbHMuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgZXJyb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBEZWNvZGVFeGNlcHRpb24gPSBDb21tb24uRGVjb2RlRXhjZXB0aW9uO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGFuIGBEZWNvZGVFeGNlcHRpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSByZWZpbmVtZW50c1xuICovXG5leHBvcnQgY29uc3QgaXNEZWNvZGVFeGNlcHRpb24gPSBDb21tb24uaXNEZWNvZGVFeGNlcHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equal.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Equal.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst symbol = /*#__PURE__*/Symbol.for(\"effect/Equal\");\nfunction equals() {\n  if (arguments.length === 1) {\n    return self => compareBoth(self, arguments[0]);\n  }\n  return compareBoth(arguments[0], arguments[1]);\n}\nfunction compareBoth(self, that) {\n  if (self === that) {\n    return true;\n  }\n  const selfType = typeof self;\n  if (selfType !== typeof that) {\n    return false;\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (_Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(self) === _Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(that) && self[symbol](that)) {\n          return true;\n        } else {\n          return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString();\n      }\n    }\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]));\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self);\n        const keysThat = Object.keys(that);\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n            }\n          }\n          return true;\n        }\n      }\n      return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n    }\n  }\n  return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n}\n/**\n * @since 2.0.0\n * @category guards\n */\nconst isEqual = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category instances\n */\nconst equivalence = () => equals;\n//# sourceMappingURL=Equal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBa0M7QUFDVztBQUNNO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBUyxXQUFXLDBDQUFTO0FBQ3pDO0FBQ0EsVUFBVTtBQUNWLGlCQUFpQiw0REFBcUIsWUFBWSw0REFBcUIsVUFBVSw0REFBcUI7QUFDdEc7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0REFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNERBQXFCLFVBQVUsNERBQXFCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDREQUFxQixVQUFVLDREQUFxQjtBQUNqRTtBQUNBO0FBQ0EsU0FBUyw0REFBcUIsWUFBWSw0REFBcUIsVUFBVSw0REFBcUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQiwwREFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vRXF1YWwuanM/MDU5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuL0hhc2guanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG5pbXBvcnQgeyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUgfSBmcm9tIFwiLi9VdGlscy5qc1wiO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xzXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9FcXVhbFwiKTtcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHNlbGYgPT4gY29tcGFyZUJvdGgoc2VsZiwgYXJndW1lbnRzWzBdKTtcbiAgfVxuICByZXR1cm4gY29tcGFyZUJvdGgoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xufVxuZnVuY3Rpb24gY29tcGFyZUJvdGgoc2VsZiwgdGhhdCkge1xuICBpZiAoc2VsZiA9PT0gdGhhdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHNlbGZUeXBlID0gdHlwZW9mIHNlbGY7XG4gIGlmIChzZWxmVHlwZSAhPT0gdHlwZW9mIHRoYXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHNlbGZUeXBlID09PSBcIm9iamVjdFwiIHx8IHNlbGZUeXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBpZiAoc2VsZiAhPT0gbnVsbCAmJiB0aGF0ICE9PSBudWxsKSB7XG4gICAgICBpZiAoaXNFcXVhbChzZWxmKSAmJiBpc0VxdWFsKHRoYXQpKSB7XG4gICAgICAgIGlmIChIYXNoLmhhc2goc2VsZikgPT09IEhhc2guaGFzaCh0aGF0KSAmJiBzZWxmW3N5bWJvbF0odGhhdCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RydWN0dXJhbFJlZ2lvblN0YXRlLmVuYWJsZWQgJiYgc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlciA/IHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIoc2VsZiwgdGhhdCkgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxmIGluc3RhbmNlb2YgRGF0ZSAmJiB0aGF0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gc2VsZi50b0lTT1N0cmluZygpID09PSB0aGF0LnRvSVNPU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZikgJiYgQXJyYXkuaXNBcnJheSh0aGF0KSkge1xuICAgICAgICByZXR1cm4gc2VsZi5sZW5ndGggPT09IHRoYXQubGVuZ3RoICYmIHNlbGYuZXZlcnkoKHYsIGkpID0+IGNvbXBhcmVCb3RoKHYsIHRoYXRbaV0pKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2VsZikgPT09IE9iamVjdC5wcm90b3R5cGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlbGYpID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgIGNvbnN0IGtleXNTZWxmID0gT2JqZWN0LmtleXMoc2VsZik7XG4gICAgICAgIGNvbnN0IGtleXNUaGF0ID0gT2JqZWN0LmtleXModGhhdCk7XG4gICAgICAgIGlmIChrZXlzU2VsZi5sZW5ndGggPT09IGtleXNUaGF0Lmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXNTZWxmKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gdGhhdCAmJiBjb21wYXJlQm90aChzZWxmW2tleV0sIHRoYXRba2V5XSkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyID8gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlcihzZWxmLCB0aGF0KSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIgPyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyKHNlbGYsIHRoYXQpIDogZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCAmJiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyID8gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlcihzZWxmLCB0aGF0KSA6IGZhbHNlO1xufVxuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBndWFyZHNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRXF1YWwgPSB1ID0+IGhhc1Byb3BlcnR5KHUsIHN5bWJvbCk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICovXG5leHBvcnQgY29uc3QgZXF1aXZhbGVuY2UgPSAoKSA9PiBlcXVhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcXVhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equivalence.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Equivalence.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   strict: () => (/* binding */ strict),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst make = isEquivalent => (self, that) => self === that || isEquivalent(self, that);\nconst isStrictEquivalent = (x, y) => x === y;\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nconst strict = () => isStrictEquivalent;\n/**\n * @category instances\n * @since 2.0.0\n */\nconst string = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst number = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst boolean = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst bigint = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst symbol = /*#__PURE__*/strict();\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combine = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make((x, y) => self(x, y) && that(x, y)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => make((x, y) => {\n  if (!self(x, y)) {\n    return false;\n  }\n  for (const equivalence of collection) {\n    if (!equivalence(x, y)) {\n      return false;\n    }\n  }\n  return true;\n}));\nconst isAlwaysEquivalent = (_x, _y) => true;\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineAll = collection => combineMany(isAlwaysEquivalent, collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make((x, y) => self(f(x), f(y))));\n/**\n * @category instances\n * @since 2.0.0\n */\nconst Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false;\n      }\n      collectionLength++;\n    }\n    return true;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  const equivalence = all(collection);\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)));\n};\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst array = item => make((self, that) => {\n  if (self.length !== that.length) {\n    return false;\n  }\n  for (let i = 0; i < self.length; i++) {\n    const isEq = item(self[i], that[i]);\n    if (!isEq) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n//# sourceMappingURL=Equivalence.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWl2YWxlbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsa0RBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGtEQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixrREFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9FcXVpdmFsZW5jZS5qcz9mMDllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIGBFcXVpdmFsZW5jZWAgdHlwZSBjbGFzcywgd2hpY2ggZGVmaW5lcyBhIGJpbmFyeSByZWxhdGlvblxuICogdGhhdCBpcyByZWZsZXhpdmUsIHN5bW1ldHJpYywgYW5kIHRyYW5zaXRpdmUuIEluIG90aGVyIHdvcmRzLCBpdCBkZWZpbmVzIGEgbm90aW9uIG9mIGVxdWl2YWxlbmNlIGJldHdlZW4gdmFsdWVzIG9mIGEgY2VydGFpbiB0eXBlLlxuICogVGhlc2UgcHJvcGVydGllcyBhcmUgYWxzbyBrbm93biBpbiBtYXRoZW1hdGljcyBhcyBhbiBcImVxdWl2YWxlbmNlIHJlbGF0aW9uXCIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IGR1YWwgfSBmcm9tIFwiLi9GdW5jdGlvbi5qc1wiO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1ha2UgPSBpc0VxdWl2YWxlbnQgPT4gKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgfHwgaXNFcXVpdmFsZW50KHNlbGYsIHRoYXQpO1xuY29uc3QgaXNTdHJpY3RFcXVpdmFsZW50ID0gKHgsIHkpID0+IHggPT09IHk7XG4vKipcbiAqIFJldHVybiBhbiBgRXF1aXZhbGVuY2VgIHRoYXQgdXNlcyBzdHJpY3QgZXF1YWxpdHkgKD09PSkgdG8gY29tcGFyZSB2YWx1ZXMuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpY3QgPSAoKSA9PiBpc1N0cmljdEVxdWl2YWxlbnQ7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nID0gLyojX19QVVJFX18qL3N0cmljdCgpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IC8qI19fUFVSRV9fKi9zdHJpY3QoKTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBib29sZWFuID0gLyojX19QVVJFX18qL3N0cmljdCgpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJpZ2ludCA9IC8qI19fUFVSRV9fKi9zdHJpY3QoKTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovc3RyaWN0KCk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgY29tYmluZSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCB0aGF0KSA9PiBtYWtlKCh4LCB5KSA9PiBzZWxmKHgsIHkpICYmIHRoYXQoeCwgeSkpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lTWFueSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBjb2xsZWN0aW9uKSA9PiBtYWtlKCh4LCB5KSA9PiB7XG4gIGlmICghc2VsZih4LCB5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IGVxdWl2YWxlbmNlIG9mIGNvbGxlY3Rpb24pIHtcbiAgICBpZiAoIWVxdWl2YWxlbmNlKHgsIHkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSkpO1xuY29uc3QgaXNBbHdheXNFcXVpdmFsZW50ID0gKF94LCBfeSkgPT4gdHJ1ZTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lQWxsID0gY29sbGVjdGlvbiA9PiBjb21iaW5lTWFueShpc0Fsd2F5c0VxdWl2YWxlbnQsIGNvbGxlY3Rpb24pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbWFwcGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBJbnB1dCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiBtYWtlKCh4LCB5KSA9PiBzZWxmKGYoeCksIGYoeSkpKSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgRGF0ZSA9IC8qI19fUFVSRV9fKi9tYXBJbnB1dChudW1iZXIsIGRhdGUgPT4gZGF0ZS5nZXRUaW1lKCkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29tYmluaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2R1Y3QgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gbWFrZSgoW3hhLCB4Yl0sIFt5YSwgeWJdKSA9PiBzZWxmKHhhLCB5YSkgJiYgdGhhdCh4YiwgeWIpKSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYWxsID0gY29sbGVjdGlvbiA9PiB7XG4gIHJldHVybiBtYWtlKCh4LCB5KSA9PiB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oeC5sZW5ndGgsIHkubGVuZ3RoKTtcbiAgICBsZXQgY29sbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgZm9yIChjb25zdCBlcXVpdmFsZW5jZSBvZiBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbkxlbmd0aCA+PSBsZW4pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoIWVxdWl2YWxlbmNlKHhbY29sbGVjdGlvbkxlbmd0aF0sIHlbY29sbGVjdGlvbkxlbmd0aF0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbGxlY3Rpb25MZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWN0TWFueSA9IChzZWxmLCBjb2xsZWN0aW9uKSA9PiB7XG4gIGNvbnN0IGVxdWl2YWxlbmNlID0gYWxsKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gbWFrZSgoeCwgeSkgPT4gIXNlbGYoeFswXSwgeVswXSkgPyBmYWxzZSA6IGVxdWl2YWxlbmNlKHguc2xpY2UoMSksIHkuc2xpY2UoMSkpKTtcbn07XG4vKipcbiAqIFNpbWlsYXIgdG8gYFByb21pc2UuYWxsYCBidXQgb3BlcmF0ZXMgb24gYEVxdWl2YWxlbmNlYHMuXG4gKlxuICogYGBgXG4gKiBbRXF1aXZhbGVuY2U8QT4sIEVxdWl2YWxlbmNlPEI+LCAuLi5dIC0+IEVxdWl2YWxlbmNlPFtBLCBCLCAuLi5dPlxuICogYGBgXG4gKlxuICogR2l2ZW4gYSB0dXBsZSBvZiBgRXF1aXZhbGVuY2VgcyByZXR1cm5zIGEgbmV3IGBFcXVpdmFsZW5jZWAgdGhhdCBjb21wYXJlcyB2YWx1ZXMgb2YgYSB0dXBsZVxuICogYnkgYXBwbHlpbmcgZWFjaCBgRXF1aXZhbGVuY2VgIHRvIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQgb2YgdGhlIHR1cGxlLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0dXBsZSA9ICguLi5lbGVtZW50cykgPT4gYWxsKGVsZW1lbnRzKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgRXF1aXZhbGVuY2VgIGZvciBhbiBhcnJheSBvZiB2YWx1ZXMgYmFzZWQgb24gYSBnaXZlbiBgRXF1aXZhbGVuY2VgIGZvciB0aGUgZWxlbWVudHMgb2YgdGhlIGFycmF5LlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBhcnJheSA9IGl0ZW0gPT4gbWFrZSgoc2VsZiwgdGhhdCkgPT4ge1xuICBpZiAoc2VsZi5sZW5ndGggIT09IHRoYXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlzRXEgPSBpdGVtKHNlbGZbaV0sIHRoYXRbaV0pO1xuICAgIGlmICghaXNFcSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0pO1xuLyoqXG4gKiBHaXZlbiBhIHN0cnVjdCBvZiBgRXF1aXZhbGVuY2VgcyByZXR1cm5zIGEgbmV3IGBFcXVpdmFsZW5jZWAgdGhhdCBjb21wYXJlcyB2YWx1ZXMgb2YgYSBzdHJ1Y3RcbiAqIGJ5IGFwcGx5aW5nIGVhY2ggYEVxdWl2YWxlbmNlYCB0byB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBvZiB0aGUgc3RydWN0LlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJ1Y3QgPSBmaWVsZHMgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgcmV0dXJuIG1ha2UoKHNlbGYsIHRoYXQpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICBpZiAoIWZpZWxkc1trZXldKHNlbGZba2V5XSwgdGhhdFtrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcXVpdmFsZW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equivalence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Function.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Function.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SK: () => (/* binding */ SK),\n/* harmony export */   absurd: () => (/* binding */ absurd),\n/* harmony export */   apply: () => (/* binding */ apply),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   constFalse: () => (/* binding */ constFalse),\n/* harmony export */   constNull: () => (/* binding */ constNull),\n/* harmony export */   constTrue: () => (/* binding */ constTrue),\n/* harmony export */   constUndefined: () => (/* binding */ constUndefined),\n/* harmony export */   constVoid: () => (/* binding */ constVoid),\n/* harmony export */   constant: () => (/* binding */ constant),\n/* harmony export */   dual: () => (/* binding */ dual),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   flow: () => (/* binding */ flow),\n/* harmony export */   hole: () => (/* binding */ hole),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   satisfies: () => (/* binding */ satisfies),\n/* harmony export */   tupled: () => (/* binding */ tupled),\n/* harmony export */   unsafeCoerce: () => (/* binding */ unsafeCoerce),\n/* harmony export */   untupled: () => (/* binding */ untupled)\n/* harmony export */ });\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isFunction = input => typeof input === \"function\";\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nconst dual = function (arity, body) {\n  if (typeof arity === \"function\") {\n    return function () {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments);\n      }\n      return self => body(self, ...arguments);\n    };\n  }\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`);\n    case 2:\n      return function (a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b);\n        }\n        return function (self) {\n          return body(self, a);\n        };\n      };\n    case 3:\n      return function (a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c);\n        }\n        return function (self) {\n          return body(self, a, b);\n        };\n      };\n    case 4:\n      return function (a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d);\n        }\n        return function (self) {\n          return body(self, a, b, c);\n        };\n      };\n    case 5:\n      return function (a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e);\n        }\n        return function (self) {\n          return body(self, a, b, c, d);\n        };\n      };\n    default:\n      return function () {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments);\n        }\n        const args = arguments;\n        return function (self) {\n          return body(self, ...args);\n        };\n      };\n  }\n};\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nconst apply = a => self => self(a);\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nconst identity = a => a;\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nconst satisfies = () => b => b;\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nconst unsafeCoerce = identity;\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nconst constant = value => () => value;\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nconst constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nconst constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nconst constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nconst constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nconst constVoid = constUndefined;\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nconst flip = f => (...b) => (...a) => f(...a)(...b);\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nconst compose = /*#__PURE__*/dual(2, (ab, bc) => a => bc(ab(a)));\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nconst absurd = _ => {\n  throw new Error(\"Called `absurd` function which should be uncallable\");\n};\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nconst tupled = f => a => f(...a);\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nconst untupled = f => (...a) => f(a);\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n    case 2:\n      return ab(a);\n    case 3:\n      return bc(ab(a));\n    case 4:\n      return cd(bc(ab(a)));\n    case 5:\n      return de(cd(bc(ab(a))));\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n    default:\n      {\n        let ret = arguments[0];\n        for (let i = 1; i < arguments.length; i++) {\n          ret = arguments[i](ret);\n        }\n        return ret;\n      }\n  }\n}\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n  return;\n}\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nconst hole = /*#__PURE__*/unsafeCoerce(absurd);\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nconst SK = (_, b) => b;\n//# sourceMappingURL=Function.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/GlobalValue.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/GlobalValue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalValue: () => (/* binding */ globalValue)\n/* harmony export */ });\n/* harmony import */ var _internal_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n/**\n * @since 2.0.0\n */\n\nconst globalStoreId = /*#__PURE__*/Symbol.for(`effect/GlobalValue/globalStoreId/${/*#__PURE__*/_internal_version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()}`);\nif (!(globalStoreId in globalThis)) {\n  ;\n  globalThis[globalStoreId] = /*#__PURE__*/new Map();\n}\nconst globalStore = globalThis[globalStoreId];\n/**\n * @since 2.0.0\n */\nconst globalValue = (id, compute) => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute());\n  }\n  return globalStore.get(id);\n};\n//# sourceMappingURL=GlobalValue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0dsb2JhbFZhbHVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ2lEO0FBQ2pELGtGQUFrRixhQUFhLG1FQUF5QixHQUFHO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9HbG9iYWxWYWx1ZS5qcz9jZDljIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCAqIGFzIHZlcnNpb24gZnJvbSBcIi4vaW50ZXJuYWwvdmVyc2lvbi5qc1wiO1xuY29uc3QgZ2xvYmFsU3RvcmVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKGBlZmZlY3QvR2xvYmFsVmFsdWUvZ2xvYmFsU3RvcmVJZC8key8qI19fUFVSRV9fKi92ZXJzaW9uLmdldEN1cnJlbnRWZXJzaW9uKCl9YCk7XG5pZiAoIShnbG9iYWxTdG9yZUlkIGluIGdsb2JhbFRoaXMpKSB7XG4gIDtcbiAgZ2xvYmFsVGhpc1tnbG9iYWxTdG9yZUlkXSA9IC8qI19fUFVSRV9fKi9uZXcgTWFwKCk7XG59XG5jb25zdCBnbG9iYWxTdG9yZSA9IGdsb2JhbFRoaXNbZ2xvYmFsU3RvcmVJZF07XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZ2xvYmFsVmFsdWUgPSAoaWQsIGNvbXB1dGUpID0+IHtcbiAgaWYgKCFnbG9iYWxTdG9yZS5oYXMoaWQpKSB7XG4gICAgZ2xvYmFsU3RvcmUuc2V0KGlkLCBjb21wdXRlKCkpO1xuICB9XG4gIHJldHVybiBnbG9iYWxTdG9yZS5nZXQoaWQpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsb2JhbFZhbHVlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Hash.js":
/*!**********************************************!*\
  !*** ./node_modules/effect/dist/esm/Hash.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isHash: () => (/* binding */ isHash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   optimize: () => (/* binding */ optimize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   structure: () => (/* binding */ structure),\n/* harmony export */   structureKeys: () => (/* binding */ structureKeys),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n/** @internal */\nconst randomHashCache = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__.globalValue)( /*#__PURE__*/Symbol.for(\"effect/Hash/randomHashCache\"), () => new WeakMap());\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst symbol = /*#__PURE__*/Symbol.for(\"effect/Hash\");\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst hash = self => {\n  if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled === true) {\n    return 0;\n  }\n  switch (typeof self) {\n    case \"number\":\n      return number(self);\n    case \"bigint\":\n      return string(self.toString(10));\n    case \"boolean\":\n      return string(String(self));\n    case \"symbol\":\n      return string(String(self));\n    case \"string\":\n      return string(self);\n    case \"undefined\":\n      return string(\"undefined\");\n    case \"function\":\n    case \"object\":\n      {\n        if (self === null) {\n          return string(\"null\");\n        } else if (self instanceof Date) {\n          return hash(self.toISOString());\n        } else if (isHash(self)) {\n          return self[symbol]();\n        } else {\n          return random(self);\n        }\n      }\n    default:\n      throw new Error(`BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`);\n  }\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst random = self => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));\n  }\n  return randomHashCache.get(self);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst combine = b => self => self * 53 ^ b;\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst optimize = n => n & 0xbfffffff | n >>> 1 & 0x40000000;\n/**\n * @since 2.0.0\n * @category guards\n */\nconst isHash = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst number = n => {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  let h = n | 0;\n  if (h !== n) {\n    h ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff;\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst string = str => {\n  let h = 5381,\n    i = str.length;\n  while (i) {\n    h = h * 33 ^ str.charCodeAt(--i);\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst structureKeys = (o, keys) => {\n  let h = 12289;\n  for (let i = 0; i < keys.length; i++) {\n    h ^= (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(string(keys[i]), combine(hash(o[keys[i]])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst structure = o => structureKeys(o, Object.keys(o));\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst array = arr => {\n  let h = 6151;\n  for (let i = 0; i < arr.length; i++) {\n    h = (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(h, combine(hash(arr[i])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst cached = function () {\n  if (arguments.length === 1) {\n    const self = arguments[0];\n    return function (hash) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash;\n        },\n        enumerable: false\n      });\n      return hash;\n    };\n  }\n  const self = arguments[0];\n  const hash = arguments[1];\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash;\n    },\n    enumerable: false\n  });\n  return hash;\n};\n//# sourceMappingURL=Hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0hhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNxQztBQUNVO0FBQ0Y7QUFDTTtBQUNuRDtBQUNBLHFDQUFxQyw0REFBVztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLE1BQU0sNERBQXFCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0JBQW9CLDBEQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DLFNBQVMsa0RBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQyxRQUFRLGtEQUFJO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9IYXNoLmpzPzM4ZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gXCIuL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBnbG9iYWxWYWx1ZSB9IGZyb20gXCIuL0dsb2JhbFZhbHVlLmpzXCI7XG5pbXBvcnQgeyBoYXNQcm9wZXJ0eSB9IGZyb20gXCIuL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgc3RydWN0dXJhbFJlZ2lvblN0YXRlIH0gZnJvbSBcIi4vVXRpbHMuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IHJhbmRvbUhhc2hDYWNoZSA9IC8qI19fUFVSRV9fKi9nbG9iYWxWYWx1ZSggLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvSGFzaC9yYW5kb21IYXNoQ2FjaGVcIiksICgpID0+IG5ldyBXZWFrTWFwKCkpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xzXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9IYXNoXCIpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoID0gc2VsZiA9PiB7XG4gIGlmIChzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHNlbGYpIHtcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICByZXR1cm4gbnVtYmVyKHNlbGYpO1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIHJldHVybiBzdHJpbmcoc2VsZi50b1N0cmluZygxMCkpO1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gc3RyaW5nKFN0cmluZyhzZWxmKSk7XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgcmV0dXJuIHN0cmluZyhTdHJpbmcoc2VsZikpO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBzdHJpbmcoc2VsZik7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIHN0cmluZyhcInVuZGVmaW5lZFwiKTtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICB7XG4gICAgICAgIGlmIChzZWxmID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZyhcIm51bGxcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICByZXR1cm4gaGFzaChzZWxmLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSGFzaChzZWxmKSkge1xuICAgICAgICAgIHJldHVybiBzZWxmW3N5bWJvbF0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmFuZG9tKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiB1bmhhbmRsZWQgdHlwZW9mICR7dHlwZW9mIHNlbGZ9IC0gcGxlYXNlIHJlcG9ydCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vRWZmZWN0LVRTL2VmZmVjdC9pc3N1ZXNgKTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgcmFuZG9tID0gc2VsZiA9PiB7XG4gIGlmICghcmFuZG9tSGFzaENhY2hlLmhhcyhzZWxmKSkge1xuICAgIHJhbmRvbUhhc2hDYWNoZS5zZXQoc2VsZiwgbnVtYmVyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkpO1xuICB9XG4gIHJldHVybiByYW5kb21IYXNoQ2FjaGUuZ2V0KHNlbGYpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgY29tYmluZSA9IGIgPT4gc2VsZiA9PiBzZWxmICogNTMgXiBiO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBvcHRpbWl6ZSA9IG4gPT4gbiAmIDB4YmZmZmZmZmYgfCBuID4+PiAxICYgMHg0MDAwMDAwMDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgZ3VhcmRzXG4gKi9cbmV4cG9ydCBjb25zdCBpc0hhc2ggPSB1ID0+IGhhc1Byb3BlcnR5KHUsIHN5bWJvbCk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IG4gPT4ge1xuICBpZiAobiAhPT0gbiB8fCBuID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGxldCBoID0gbiB8IDA7XG4gIGlmIChoICE9PSBuKSB7XG4gICAgaCBePSBuICogMHhmZmZmZmZmZjtcbiAgfVxuICB3aGlsZSAobiA+IDB4ZmZmZmZmZmYpIHtcbiAgICBoIF49IG4gLz0gMHhmZmZmZmZmZjtcbiAgfVxuICByZXR1cm4gb3B0aW1pemUoaCk7XG59O1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSBzdHIgPT4ge1xuICBsZXQgaCA9IDUzODEsXG4gICAgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlIChpKSB7XG4gICAgaCA9IGggKiAzMyBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gIH1cbiAgcmV0dXJuIG9wdGltaXplKGgpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlS2V5cyA9IChvLCBrZXlzKSA9PiB7XG4gIGxldCBoID0gMTIyODk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGggXj0gcGlwZShzdHJpbmcoa2V5c1tpXSksIGNvbWJpbmUoaGFzaChvW2tleXNbaV1dKSkpO1xuICB9XG4gIHJldHVybiBvcHRpbWl6ZShoKTtcbn07XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHN0cnVjdHVyZSA9IG8gPT4gc3RydWN0dXJlS2V5cyhvLCBPYmplY3Qua2V5cyhvKSk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGFycmF5ID0gYXJyID0+IHtcbiAgbGV0IGggPSA2MTUxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGggPSBwaXBlKGgsIGNvbWJpbmUoaGFzaChhcnJbaV0pKSk7XG4gIH1cbiAgcmV0dXJuIG9wdGltaXplKGgpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgY2FjaGVkID0gZnVuY3Rpb24gKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHNlbGYgPSBhcmd1bWVudHNbMF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgc3ltYm9sLCB7XG4gICAgICAgIHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9O1xuICB9XG4gIGNvbnN0IHNlbGYgPSBhcmd1bWVudHNbMF07XG4gIGNvbnN0IGhhc2ggPSBhcmd1bWVudHNbMV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBzeW1ib2wsIHtcbiAgICB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBoYXNoO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Inspectable.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Inspectable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProto: () => (/* binding */ BaseProto),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   NodeInspectSymbol: () => (/* binding */ NodeInspectSymbol),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   stringifyCircular: () => (/* binding */ stringifyCircular),\n/* harmony export */   toJSON: () => (/* binding */ toJSON),\n/* harmony export */   toStringUnknown: () => (/* binding */ toStringUnknown)\n/* harmony export */ });\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst NodeInspectSymbol = /*#__PURE__*/Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n * @since 2.0.0\n */\nconst toJSON = x => {\n  if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(x, \"toJSON\") && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(x[\"toJSON\"]) && x[\"toJSON\"].length === 0) {\n    return x.toJSON();\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON);\n  }\n  return x;\n};\n/**\n * @since 2.0.0\n */\nconst format = x => JSON.stringify(x, null, 2);\n/**\n * @since 2.0.0\n */\nconst BaseProto = {\n  toJSON() {\n    return toJSON(this);\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return format(this.toJSON());\n  }\n};\n/**\n * @since 2.0.0\n */\nclass Class {\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON());\n  }\n}\n/**\n * @since 2.0.0\n */\nconst toStringUnknown = (u, whitespace = 2) => {\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u);\n  } catch (_) {\n    return String(u);\n  }\n};\n/**\n * @since 2.0.0\n */\nconst stringifyCircular = (obj, whitespace) => {\n  let cache = [];\n  const retVal = JSON.stringify(obj, (_key, value) => typeof value === \"object\" && value !== null ? cache.includes(value) ? undefined // circular reference\n  : cache.push(value) && value : value, whitespace);\n  cache = undefined;\n  return retVal;\n};\n//# sourceMappingURL=Inspectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0luc3BlY3RhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQLE1BQU0sMERBQVcsaUJBQWlCLHlEQUFVO0FBQzVDO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9JbnNwZWN0YWJsZS5qcz9kNTkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IGhhc1Byb3BlcnR5LCBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHN5bWJvbHNcbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVJbnNwZWN0U3ltYm9sID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0b0pTT04gPSB4ID0+IHtcbiAgaWYgKGhhc1Byb3BlcnR5KHgsIFwidG9KU09OXCIpICYmIGlzRnVuY3Rpb24oeFtcInRvSlNPTlwiXSkgJiYgeFtcInRvSlNPTlwiXS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4geC50b0pTT04oKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIHgubWFwKHRvSlNPTik7XG4gIH1cbiAgcmV0dXJuIHg7XG59O1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdCA9IHggPT4gSlNPTi5zdHJpbmdpZnkoeCwgbnVsbCwgMik7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgQmFzZVByb3RvID0ge1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRvSlNPTih0aGlzKTtcbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfSxcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzcyB7XG4gIC8qKlxuICAgKiBAc2luY2UgMi4wLjBcbiAgICovXG4gIFtOb2RlSW5zcGVjdFN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBzaW5jZSAyLjAuMFxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufVxuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHRvU3RyaW5nVW5rbm93biA9ICh1LCB3aGl0ZXNwYWNlID0gMikgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgdSA9PT0gXCJvYmplY3RcIiA/IHN0cmluZ2lmeUNpcmN1bGFyKHUsIHdoaXRlc3BhY2UpIDogU3RyaW5nKHUpO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdpZnlDaXJjdWxhciA9IChvYmosIHdoaXRlc3BhY2UpID0+IHtcbiAgbGV0IGNhY2hlID0gW107XG4gIGNvbnN0IHJldFZhbCA9IEpTT04uc3RyaW5naWZ5KG9iaiwgKF9rZXksIHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgPyBjYWNoZS5pbmNsdWRlcyh2YWx1ZSkgPyB1bmRlZmluZWQgLy8gY2lyY3VsYXIgcmVmZXJlbmNlXG4gIDogY2FjaGUucHVzaCh2YWx1ZSkgJiYgdmFsdWUgOiB2YWx1ZSwgd2hpdGVzcGFjZSk7XG4gIGNhY2hlID0gdW5kZWZpbmVkO1xuICByZXR1cm4gcmV0VmFsO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUluc3BlY3RhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Inspectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Micro.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Micro.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   EnvRefTypeId: () => (/* binding */ EnvRefTypeId),\n/* harmony export */   EnvTypeId: () => (/* binding */ EnvTypeId),\n/* harmony export */   Error: () => (/* binding */ Error),\n/* harmony export */   HandleTypeId: () => (/* binding */ HandleTypeId),\n/* harmony export */   MicroCauseTypeId: () => (/* binding */ MicroCauseTypeId),\n/* harmony export */   MicroSchedulerDefault: () => (/* binding */ MicroSchedulerDefault),\n/* harmony export */   MicroScope: () => (/* binding */ MicroScope),\n/* harmony export */   MicroScopeTypeId: () => (/* binding */ MicroScopeTypeId),\n/* harmony export */   NoSuchElementException: () => (/* binding */ NoSuchElementException),\n/* harmony export */   TaggedError: () => (/* binding */ TaggedError),\n/* harmony export */   TimeoutException: () => (/* binding */ TimeoutException),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   acquireRelease: () => (/* binding */ acquireRelease),\n/* harmony export */   acquireUseRelease: () => (/* binding */ acquireUseRelease),\n/* harmony export */   addFinalizer: () => (/* binding */ addFinalizer),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asSome: () => (/* binding */ asSome),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   async: () => (/* binding */ async),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   catchAll: () => (/* binding */ catchAll),\n/* harmony export */   catchAllCause: () => (/* binding */ catchAllCause),\n/* harmony export */   catchAllDefect: () => (/* binding */ catchAllDefect),\n/* harmony export */   catchCauseIf: () => (/* binding */ catchCauseIf),\n/* harmony export */   catchIf: () => (/* binding */ catchIf),\n/* harmony export */   catchTag: () => (/* binding */ catchTag),\n/* harmony export */   causeDie: () => (/* binding */ causeDie),\n/* harmony export */   causeFail: () => (/* binding */ causeFail),\n/* harmony export */   causeInterrupt: () => (/* binding */ causeInterrupt),\n/* harmony export */   causeIsDie: () => (/* binding */ causeIsDie),\n/* harmony export */   causeIsFail: () => (/* binding */ causeIsFail),\n/* harmony export */   causeIsInterrupt: () => (/* binding */ causeIsInterrupt),\n/* harmony export */   causeSquash: () => (/* binding */ causeSquash),\n/* harmony export */   causeWithTrace: () => (/* binding */ causeWithTrace),\n/* harmony export */   context: () => (/* binding */ context),\n/* harmony export */   currentAbortController: () => (/* binding */ currentAbortController),\n/* harmony export */   currentAbortSignal: () => (/* binding */ currentAbortSignal),\n/* harmony export */   currentConcurrency: () => (/* binding */ currentConcurrency),\n/* harmony export */   currentContext: () => (/* binding */ currentContext),\n/* harmony export */   currentMaxDepthBeforeYield: () => (/* binding */ currentMaxDepthBeforeYield),\n/* harmony export */   currentScheduler: () => (/* binding */ currentScheduler),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   die: () => (/* binding */ die),\n/* harmony export */   either: () => (/* binding */ either),\n/* harmony export */   ensuring: () => (/* binding */ ensuring),\n/* harmony export */   envGet: () => (/* binding */ envGet),\n/* harmony export */   envMake: () => (/* binding */ envMake),\n/* harmony export */   envMutate: () => (/* binding */ envMutate),\n/* harmony export */   envRefMake: () => (/* binding */ envRefMake),\n/* harmony export */   envSet: () => (/* binding */ envSet),\n/* harmony export */   envUnsafeMakeEmpty: () => (/* binding */ envUnsafeMakeEmpty),\n/* harmony export */   exit: () => (/* binding */ exit),\n/* harmony export */   exitDie: () => (/* binding */ exitDie),\n/* harmony export */   exitFail: () => (/* binding */ exitFail),\n/* harmony export */   exitFailCause: () => (/* binding */ exitFailCause),\n/* harmony export */   exitInterrupt: () => (/* binding */ exitInterrupt),\n/* harmony export */   exitIsDie: () => (/* binding */ exitIsDie),\n/* harmony export */   exitIsFail: () => (/* binding */ exitIsFail),\n/* harmony export */   exitIsFailure: () => (/* binding */ exitIsFailure),\n/* harmony export */   exitIsInterrupt: () => (/* binding */ exitIsInterrupt),\n/* harmony export */   exitIsSuccess: () => (/* binding */ exitIsSuccess),\n/* harmony export */   exitSucceed: () => (/* binding */ exitSucceed),\n/* harmony export */   exitVoid: () => (/* binding */ exitVoid),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   failCause: () => (/* binding */ failCause),\n/* harmony export */   failCauseSync: () => (/* binding */ failCauseSync),\n/* harmony export */   failSync: () => (/* binding */ failSync),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterOrFail: () => (/* binding */ filterOrFail),\n/* harmony export */   filterOrFailCause: () => (/* binding */ filterOrFailCause),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   forever: () => (/* binding */ forever),\n/* harmony export */   fork: () => (/* binding */ fork),\n/* harmony export */   forkDaemon: () => (/* binding */ forkDaemon),\n/* harmony export */   forkIn: () => (/* binding */ forkIn),\n/* harmony export */   forkScoped: () => (/* binding */ forkScoped),\n/* harmony export */   fromEither: () => (/* binding */ fromEither),\n/* harmony export */   fromExit: () => (/* binding */ fromExit),\n/* harmony export */   fromExitSync: () => (/* binding */ fromExitSync),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEnvRef: () => (/* binding */ getEnvRef),\n/* harmony export */   ignore: () => (/* binding */ ignore),\n/* harmony export */   ignoreLogged: () => (/* binding */ ignoreLogged),\n/* harmony export */   interrupt: () => (/* binding */ interrupt),\n/* harmony export */   interruptible: () => (/* binding */ interruptible),\n/* harmony export */   isHandle: () => (/* binding */ isHandle),\n/* harmony export */   isMicro: () => (/* binding */ isMicro),\n/* harmony export */   isMicroCause: () => (/* binding */ isMicroCause),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   locally: () => (/* binding */ locally),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapError: () => (/* binding */ mapError),\n/* harmony export */   mapErrorCause: () => (/* binding */ mapErrorCause),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchCause: () => (/* binding */ matchCause),\n/* harmony export */   matchCauseEffect: () => (/* binding */ matchCauseEffect),\n/* harmony export */   matchEffect: () => (/* binding */ matchEffect),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   onError: () => (/* binding */ onError),\n/* harmony export */   onExit: () => (/* binding */ onExit),\n/* harmony export */   onExitIf: () => (/* binding */ onExitIf),\n/* harmony export */   onInterrupt: () => (/* binding */ onInterrupt),\n/* harmony export */   option: () => (/* binding */ option),\n/* harmony export */   orDie: () => (/* binding */ orDie),\n/* harmony export */   orElseSucceed: () => (/* binding */ orElseSucceed),\n/* harmony export */   promise: () => (/* binding */ promise),\n/* harmony export */   provideContext: () => (/* binding */ provideContext),\n/* harmony export */   provideScope: () => (/* binding */ provideScope),\n/* harmony export */   provideService: () => (/* binding */ provideService),\n/* harmony export */   provideServiceEffect: () => (/* binding */ provideServiceEffect),\n/* harmony export */   race: () => (/* binding */ race),\n/* harmony export */   raceAll: () => (/* binding */ raceAll),\n/* harmony export */   raceAllFirst: () => (/* binding */ raceAllFirst),\n/* harmony export */   raceFirst: () => (/* binding */ raceFirst),\n/* harmony export */   repeat: () => (/* binding */ repeat),\n/* harmony export */   repeatExit: () => (/* binding */ repeatExit),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   runFork: () => (/* binding */ runFork),\n/* harmony export */   runPromise: () => (/* binding */ runPromise),\n/* harmony export */   runPromiseExit: () => (/* binding */ runPromiseExit),\n/* harmony export */   runSymbol: () => (/* binding */ runSymbol),\n/* harmony export */   runSync: () => (/* binding */ runSync),\n/* harmony export */   runSyncExit: () => (/* binding */ runSyncExit),\n/* harmony export */   sandbox: () => (/* binding */ sandbox),\n/* harmony export */   scheduleAddDelay: () => (/* binding */ scheduleAddDelay),\n/* harmony export */   scheduleExponential: () => (/* binding */ scheduleExponential),\n/* harmony export */   scheduleIntersect: () => (/* binding */ scheduleIntersect),\n/* harmony export */   scheduleRecurs: () => (/* binding */ scheduleRecurs),\n/* harmony export */   scheduleSpaced: () => (/* binding */ scheduleSpaced),\n/* harmony export */   scheduleUnion: () => (/* binding */ scheduleUnion),\n/* harmony export */   scheduleWithMaxDelay: () => (/* binding */ scheduleWithMaxDelay),\n/* harmony export */   scheduleWithMaxElapsed: () => (/* binding */ scheduleWithMaxElapsed),\n/* harmony export */   scope: () => (/* binding */ scope),\n/* harmony export */   scopeMake: () => (/* binding */ scopeMake),\n/* harmony export */   scopeUnsafeMake: () => (/* binding */ scopeUnsafeMake),\n/* harmony export */   scoped: () => (/* binding */ scoped),\n/* harmony export */   service: () => (/* binding */ service),\n/* harmony export */   serviceOption: () => (/* binding */ serviceOption),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   succeed: () => (/* binding */ succeed),\n/* harmony export */   succeedNone: () => (/* binding */ succeedNone),\n/* harmony export */   succeedSome: () => (/* binding */ succeedSome),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   sync: () => (/* binding */ sync),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   tapDefect: () => (/* binding */ tapDefect),\n/* harmony export */   tapError: () => (/* binding */ tapError),\n/* harmony export */   tapErrorCause: () => (/* binding */ tapErrorCause),\n/* harmony export */   tapErrorCauseIf: () => (/* binding */ tapErrorCauseIf),\n/* harmony export */   timeout: () => (/* binding */ timeout),\n/* harmony export */   timeoutOption: () => (/* binding */ timeoutOption),\n/* harmony export */   timeoutOrElse: () => (/* binding */ timeoutOrElse),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   tryPromise: () => (/* binding */ tryPromise),\n/* harmony export */   uninterruptible: () => (/* binding */ uninterruptible),\n/* harmony export */   uninterruptibleMask: () => (/* binding */ uninterruptibleMask),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   when: () => (/* binding */ when),\n/* harmony export */   withConcurrency: () => (/* binding */ withConcurrency),\n/* harmony export */   withTrace: () => (/* binding */ withTrace),\n/* harmony export */   yieldFlush: () => (/* binding */ yieldFlush),\n/* harmony export */   yieldNow: () => (/* binding */ yieldNow),\n/* harmony export */   yieldWithPriority: () => (/* binding */ yieldWithPriority),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Context_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Context.js */ \"(ssr)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var _Effectable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Effectable.js\");\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _internal_singleShotGen_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/singleShotGen.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Micro\");\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nconst runSymbol = /*#__PURE__*/Symbol.for(\"effect/Micro/runSymbol\");\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nconst isMicro = u => typeof u === \"object\" && u !== null && TypeId in u;\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst MicroCauseTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/MicroCause\");\n/**\n * @since 3.6.6\n * @experimental\n * @category guards\n */\nconst isMicroCause = self => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(self, MicroCauseTypeId);\nconst microCauseVariance = {\n  _E: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n};\nclass MicroCauseImpl extends globalThis.Error {\n  _tag;\n  traces;\n  [MicroCauseTypeId];\n  constructor(_tag, originalError, traces) {\n    const causeName = `MicroCause.${_tag}`;\n    let name;\n    let message;\n    let stack;\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`;\n      message = originalError.message;\n      const messageLines = message.split(\"\\n\").length;\n      stack = originalError.stack ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}` : `${name}: ${message}`;\n    } else {\n      name = causeName;\n      message = (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.toStringUnknown)(originalError, 0);\n      stack = `${name}: ${message}`;\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`;\n    }\n    super(message);\n    this._tag = _tag;\n    this.traces = traces;\n    this[MicroCauseTypeId] = microCauseVariance;\n    this.name = name;\n    this.stack = stack;\n  }\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_3__.pipeArguments)(this, arguments);\n  }\n  toString() {\n    return this.stack;\n  }\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol]() {\n    return this.stack;\n  }\n}\nclass FailImpl extends MicroCauseImpl {\n  error;\n  constructor(error, traces = []) {\n    super(\"Fail\", error, traces);\n    this.error = error;\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeFail = (error, traces = []) => new FailImpl(error, traces);\nclass DieImpl extends MicroCauseImpl {\n  defect;\n  constructor(defect, traces = []) {\n    super(\"Die\", defect, traces);\n    this.defect = defect;\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeDie = (defect, traces = []) => new DieImpl(defect, traces);\nclass InterruptImpl extends MicroCauseImpl {\n  constructor(traces = []) {\n    super(\"Interrupt\", \"interrupted\", traces);\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeInterrupt = (traces = []) => new InterruptImpl(traces);\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeIsFail = self => self._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeIsDie = self => self._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeIsInterrupt = self => self._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeSquash = self => self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nconst causeWithTrace = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, trace) => {\n  const traces = [...self.traces, trace];\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces);\n    case \"Interrupt\":\n      return causeInterrupt(traces);\n    case \"Fail\":\n      return causeFail(self.error, traces);\n  }\n});\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitInterrupt = /*#__PURE__*/_Either_js__WEBPACK_IMPORTED_MODULE_4__.left( /*#__PURE__*/causeInterrupt());\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitSucceed = _Either_js__WEBPACK_IMPORTED_MODULE_4__.right;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitFail = e => _Either_js__WEBPACK_IMPORTED_MODULE_4__.left(causeFail(e));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitDie = defect => _Either_js__WEBPACK_IMPORTED_MODULE_4__.left(causeDie(defect));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitFailCause = _Either_js__WEBPACK_IMPORTED_MODULE_4__.left;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitIsSuccess = _Either_js__WEBPACK_IMPORTED_MODULE_4__.isRight;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitIsFailure = _Either_js__WEBPACK_IMPORTED_MODULE_4__.isLeft;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitIsInterrupt = self => exitIsFailure(self) && self.left._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitIsFail = self => exitIsFailure(self) && self.left._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitIsDie = self => exitIsFailure(self) && self.left._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nconst exitVoid = /*#__PURE__*/exitSucceed(void 0);\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst EnvTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Env\");\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst EnvRefTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/EnvRef\");\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_3__.pipeArguments)(this, arguments);\n  }\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envMake = refs => {\n  const self = Object.create(EnvProto);\n  self.refs = refs;\n  return self;\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envUnsafeMakeEmpty = () => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  refs[currentScheduler.key] = new MicroSchedulerDefault();\n  return envMake(refs);\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envGet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, ref) => ref.key in self.refs ? self.refs[ref.key] : ref.initial);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envSet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, ref, value) => {\n  const refs = Object.assign(Object.create(null), self.refs);\n  refs[ref.key] = value;\n  return envMake(refs);\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envMutate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => envMake(f(Object.assign(Object.create(null), self.refs))));\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst service = tag => make(function (env, onExit) {\n  onExit(exitSucceed(_Context_js__WEBPACK_IMPORTED_MODULE_5__.get(envGet(env, currentContext), tag)));\n});\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst serviceOption = tag => make(function (env, onExit) {\n  onExit(exitSucceed(_Context_js__WEBPACK_IMPORTED_MODULE_5__.getOption(envGet(env, currentContext), tag)));\n});\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst getEnvRef = envRef => make((env, onExit) => onExit(_Either_js__WEBPACK_IMPORTED_MODULE_4__.right(envGet(env, envRef))));\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst locally = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, fiberRef, value) => make((env, onExit) => self[runSymbol](envSet(env, fiberRef, value), onExit)));\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst context = () => getEnvRef(currentContext);\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst provideContext = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, provided) => make(function (env, onExit) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, _Context_js__WEBPACK_IMPORTED_MODULE_5__.merge(context, provided));\n  self[runSymbol](nextEnv, onExit);\n}));\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst provideService = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, tag, service) => make(function (env, onExit) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, _Context_js__WEBPACK_IMPORTED_MODULE_5__.add(context, tag, service));\n  self[runSymbol](nextEnv, onExit);\n}));\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nconst provideServiceEffect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, tag, acquire) => flatMap(acquire, service => provideService(self, tag, service)));\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : f => setTimeout(f, 0);\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nclass MicroSchedulerDefault {\n  tasks = [];\n  running = false;\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task, _priority) {\n    this.tasks.push(task);\n    if (!this.running) {\n      this.running = true;\n      setImmediate(this.afterScheduled);\n    }\n  }\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false;\n    this.runTasks();\n  };\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks;\n    this.tasks = [];\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]();\n    }\n  }\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(_env) {\n    return false;\n  }\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks();\n    }\n  }\n}\n// ========================================================================\n// Env refs\n// ========================================================================\nconst EnvRefProto = {\n  [EnvRefTypeId]: EnvRefTypeId\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst envRefMake = (key, initial) => (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_6__.globalValue)(key, () => {\n  const self = Object.create(EnvRefProto);\n  self.key = key;\n  self.initial = initial();\n  return self;\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentAbortController = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortController\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentAbortSignal = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortSignal\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentContext = /*#__PURE__*/envRefMake(\"effect/Micro/currentContext\", () => _Context_js__WEBPACK_IMPORTED_MODULE_5__.empty());\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentConcurrency = /*#__PURE__*/envRefMake(\"effect/Micro/currentConcurrency\", () => \"unbounded\");\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentMaxDepthBeforeYield = /*#__PURE__*/envRefMake(\"effect/Micro/currentMaxDepthBeforeYield\", () => 2048);\nconst currentInterruptible = /*#__PURE__*/envRefMake(\"effect/Micro/currentInterruptible\", () => true);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentScheduler = /*#__PURE__*/envRefMake(\"effect/Micro/currentScheduler\", () => new MicroSchedulerDefault());\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nconst withConcurrency = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, concurrency) => locally(self, currentConcurrency, concurrency));\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\nconst MicroProto = {\n  ..._Effectable_js__WEBPACK_IMPORTED_MODULE_7__.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    _E: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n    _R: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n  },\n  [Symbol.iterator]() {\n    return new _internal_singleShotGen_js__WEBPACK_IMPORTED_MODULE_8__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_9__.YieldWrap(this));\n  }\n};\nconst microDepthState = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_6__.globalValue)(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}));\nconst unsafeMake = run => {\n  const self = Object.create(MicroProto);\n  self[runSymbol] = run;\n  return self;\n};\nconst unsafeMakeOptions = (run, checkAbort) => unsafeMake(function execute(env, onExit) {\n  if (checkAbort && env.refs[currentInterruptible.key] !== false && env.refs[currentAbortSignal.key].aborted) {\n    return onExit(exitInterrupt);\n  }\n  microDepthState.depth++;\n  if (microDepthState.depth === 1) {\n    microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield);\n  }\n  const scheduler = env.refs[currentScheduler.key];\n  if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {\n    scheduler.scheduleTask(() => execute(env, onExit), 0);\n  } else {\n    try {\n      run(env, onExit);\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n  }\n  microDepthState.depth--;\n});\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst make = run => unsafeMakeOptions(run, true);\n/**\n * Converts a `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nconst fromExit = self => make(function (_env, onExit) {\n  onExit(self);\n});\n/**\n * Converts a lazy `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nconst fromExitSync = self => make(function (_env, onExit) {\n  onExit(self());\n});\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeed = a => fromExit(exitSucceed(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeedSome = a => succeed(_Option_js__WEBPACK_IMPORTED_MODULE_10__.some(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeedNone = /*#__PURE__*/succeed( /*#__PURE__*/_Option_js__WEBPACK_IMPORTED_MODULE_10__.none());\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fail = e => fromExit(exitFail(e));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst failSync = e => make(function (_env, onExit) {\n  onExit(exitFail(e()));\n});\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `CauseDie`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst die = defect => fromExit(exitDie(defect));\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nconst failCause = cause => fromExit(exitFailCause(cause));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nconst failCauseSync = cause => fromExitSync(() => exitFailCause(cause()));\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst sync = evaluate => make(function (_env, onExit) {\n  onExit(exitSucceed(evaluate()));\n});\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromOption = option => make(function (_env, onExit) {\n  onExit(option._tag === \"Some\" ? exitSucceed(option.value) : exitFail(new NoSuchElementException({})));\n});\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromEither = either => make(function (_env, onExit) {\n  onExit(either._tag === \"Right\" ? either : exitFail(either.left));\n});\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst suspend = evaluate => make(function (env, onExit) {\n  evaluate()[runSymbol](env, onExit);\n});\nconst void_ = /*#__PURE__*/succeed(void 0);\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst async = register => make(function (env, onExit) {\n  let resumed = false;\n  const controller = register.length > 1 ? new AbortController() : undefined;\n  const signal = envGet(env, currentAbortSignal);\n  let cleanup = undefined;\n  function onAbort() {\n    if (cleanup) {\n      resume(uninterruptible(andThen(cleanup, fromExit(exitInterrupt))));\n    } else {\n      resume(fromExit(exitInterrupt));\n    }\n    if (controller !== undefined) {\n      controller.abort();\n    }\n  }\n  function resume(effect) {\n    if (resumed) {\n      return;\n    }\n    resumed = true;\n    signal.removeEventListener(\"abort\", onAbort);\n    effect[runSymbol](env, onExit);\n  }\n  cleanup = controller === undefined ? register(resume) : register(resume, controller.signal);\n  if (resumed) return;\n  signal.addEventListener(\"abort\", onAbort);\n});\nconst try_ = options => make(function (_env, onExit) {\n  try {\n    onExit(exitSucceed(options.try()));\n  } catch (err) {\n    onExit(exitFail(options.catch(err)));\n  }\n});\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst promise = evaluate => async(function (resume, signal) {\n  evaluate(signal).then(a => resume(succeed(a)), e => resume(die(e)));\n});\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nconst tryPromise = options => async(function (resume, signal) {\n  try {\n    options.try(signal).then(a => resume(succeed(a)), e => resume(fail(options.catch(e))));\n  } catch (err) {\n    resume(fail(options.catch(err)));\n  }\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * You can specify a priority for the task, which will determine when it is\n * executed relative to other tasks.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst yieldWithPriority = priority => make(function (env, onExit) {\n  envGet(env, currentScheduler).scheduleTask(() => onExit(exitVoid), priority);\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst yieldNow = /*#__PURE__*/yieldWithPriority(0);\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst yieldFlush = /*#__PURE__*/make(function (env, onExit) {\n  envGet(env, currentScheduler).flush();\n  onExit(exitVoid);\n});\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst never = /*#__PURE__*/async(function () {\n  const interval = setInterval(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constVoid, 2147483646);\n  return sync(() => clearInterval(interval));\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst gen = (...args) => make(function (env, onExit) {\n  const iterator = args.length === 1 ? args[0]() : args[1].call(args[0]);\n  let running = false;\n  let value = undefined;\n  function run() {\n    running = true;\n    try {\n      let shouldContinue = true;\n      while (shouldContinue) {\n        const result = iterator.next(value);\n        if (result.done) {\n          return onExit(exitSucceed(result.value));\n        }\n        shouldContinue = false;\n        (0,_Utils_js__WEBPACK_IMPORTED_MODULE_9__.yieldWrapGet)(result.value)[runSymbol](env, function (exit) {\n          if (exit._tag === \"Left\") {\n            onExit(exit);\n          } else {\n            shouldContinue = true;\n            value = exit.right;\n            if (!running) run();\n          }\n        });\n      }\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n    running = false;\n  }\n  run();\n});\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flatten = self => make(function (env, onExit) {\n  self[runSymbol](env, exit => exit._tag === \"Left\" ? onExit(exit) : exit.right[runSymbol](env, onExit));\n});\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    onExit(exit._tag === \"Left\" ? exit : exitSucceed(f(exit.right)));\n  });\n}));\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst as = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, value) => map(self, _ => value));\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst asSome = self => map(self, _Option_js__WEBPACK_IMPORTED_MODULE_10__.some);\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Left\") {\n      return onExit(exit);\n    }\n    f(exit.right)[runSymbol](env, onExit);\n  });\n}));\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flip = self => matchEffect(self, {\n  onFailure: succeed,\n  onSuccess: fail\n});\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Left\") {\n      return onExit(exit);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onExit(exitInterrupt);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(exit.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, onExit);\n    } else {\n      onExit(exitSucceed(value));\n    }\n  });\n}));\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst tap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (selfExit) {\n    if (selfExit._tag === \"Left\") {\n      return onExit(selfExit);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onExit(exitInterrupt);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfExit.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, function (tapExit) {\n        if (tapExit._tag === \"Left\") {\n          return onExit(tapExit);\n        }\n        onExit(selfExit);\n      });\n    } else {\n      onExit(selfExit);\n    }\n  });\n}));\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst asVoid = self => map(self, _ => void 0);\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nconst exit = self => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    onExit(exitSucceed(exit));\n  });\n});\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst sandbox = self => catchAllCause(self, cause => fail(cause));\nfunction forkSignal(env) {\n  const controller = new AbortController();\n  const parentSignal = envGet(env, currentAbortSignal);\n  function onAbort() {\n    controller.abort();\n    parentSignal.removeEventListener(\"abort\", onAbort);\n  }\n  parentSignal.addEventListener(\"abort\", onAbort);\n  const envWithSignal = envMutate(env, function (refs) {\n    refs[currentAbortController.key] = controller;\n    refs[currentAbortSignal.key] = controller.signal;\n    return refs;\n  });\n  return [envWithSignal, onAbort];\n}\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceAll = all => make(function (env, onExit) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let exit = undefined;\n  const causes = [];\n  function onDone(exit_) {\n    done++;\n    if (exit_._tag === \"Right\" && exit === undefined) {\n      len = index;\n      exit = exit_;\n      onAbort();\n    } else if (exit_._tag === \"Left\") {\n      causes.push(exit_.left);\n    }\n    if (done >= len) {\n      onExit(exit ?? _Either_js__WEBPACK_IMPORTED_MODULE_4__.left(causes[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceAllFirst = all => make(function (env, onExit) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let exit = undefined;\n  const causes = [];\n  function onDone(exit_) {\n    done++;\n    if (exit === undefined) {\n      len = index;\n      exit = exit_;\n      onAbort();\n    }\n    if (done >= len) {\n      onExit(exit ?? _Either_js__WEBPACK_IMPORTED_MODULE_4__.left(causes[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst race = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => raceAll([self, that]));\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceFirst = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => raceAllFirst([self, that]));\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nconst zip = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[1]), (self, that, options) => zipWith(self, that, (a, a2) => [a, a2], options));\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[1]), (self, that, f, options) => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], {\n      concurrency: \"unbounded\"\n    }), ([a, a2]) => f(a, a2));\n  }\n  return flatMap(self, a => map(that, a2 => f(a, a2)));\n});\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst filterOrFailCause = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : failCause(orFailWith(a))));\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst filterOrFail = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : fail(orFailWith(a))));\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst when = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, condition) => flatMap(isMicro(condition) ? condition : sync(condition), pass => pass ? asSome(self) : succeed(_Option_js__WEBPACK_IMPORTED_MODULE_10__.none())));\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nconst repeatExit = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => make(function (env, onExit) {\n  const startedAt = options.schedule ? Date.now() : 0;\n  let attempt = 0;\n  self[runSymbol](env, function loop(exit) {\n    if (options.while !== undefined && !options.while(exit)) {\n      return onExit(exit);\n    } else if (options.times !== undefined && attempt >= options.times) {\n      return onExit(exit);\n    }\n    attempt++;\n    let delayEffect = yieldNow;\n    if (options.schedule !== undefined) {\n      const elapsed = Date.now() - startedAt;\n      const duration = options.schedule(attempt, elapsed);\n      if (_Option_js__WEBPACK_IMPORTED_MODULE_10__.isNone(duration)) {\n        return onExit(exit);\n      }\n      delayEffect = sleep(duration.value);\n    }\n    delayEffect[runSymbol](env, function (exit) {\n      if (exit._tag === \"Left\") {\n        return onExit(exit);\n      }\n      self[runSymbol](env, loop);\n    });\n  });\n}));\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nconst repeat = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[0]), (self, options) => repeatExit(self, {\n  ...options,\n  while: exit => exit._tag === \"Right\" && (options?.while === undefined || options.while(exit.right))\n}));\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nconst forever = self => repeat(self);\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleRecurs = n => attempt => attempt <= n ? _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(0) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none();\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleSpaced = millis => () => _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(millis);\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleExponential = (baseMillis, factor = 2) => attempt => _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(Math.pow(factor, attempt) * baseMillis);\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleAddDelay = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_10__.map(self(attempt, elapsed), duration => duration + f()));\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleWithMaxDelay = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, max) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_10__.map(self(attempt, elapsed), duration => Math.min(duration, max)));\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleWithMaxElapsed = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, max) => (attempt, elapsed) => elapsed < max ? self(attempt, elapsed) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none());\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleUnion = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_10__.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2)));\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nconst scheduleIntersect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_10__.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2)));\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst catchAllCause = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchCauseIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_1__.constTrue, f));\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst catchCauseIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Right\" || !predicate(exit.left)) {\n      onExit(exit);\n    } else {\n      f(exit.left)[runSymbol](env, onExit);\n    }\n  });\n}));\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`MicroCause.Fail`) errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst catchAll = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchAllCause(self, cause => causeIsFail(cause) ? f(cause.error) : failCause(cause)));\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst catchAllDefect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchCauseIf(self, causeIsDie, die => f(die.defect)));\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst tapErrorCause = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => tapErrorCauseIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_1__.constTrue, f));\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst tapErrorCauseIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, refinement, f) => catchCauseIf(self, refinement, cause => andThen(f(cause), failCause(cause))));\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst tapError = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => tapErrorCauseIf(self, causeIsFail, fail => f(fail.error)));\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst tapDefect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => tapErrorCauseIf(self, causeIsDie, die => f(die.defect)));\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, f) => catchCauseIf(self, f => causeIsFail(f) && predicate(f.error), fail => f(fail.error)));\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchTag = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, k, f) => catchIf(self, (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isTagged)(k), f));\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nconst mapErrorCause = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchAllCause(self, cause => failCause(f(cause))));\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst mapError = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchAll(self, error => fail(f(error))));\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst orDie = self => catchAll(self, die);\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst orElseSucceed = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => catchAll(self, _ => sync(f)));\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst ignore = self => matchEffect(self, {\n  onFailure: _ => void_,\n  onSuccess: _ => void_\n});\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst ignoreLogged = self => matchEffect(self, {\n  onFailure: error => sync(() => console.error(error)),\n  onSuccess: _ => void_\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst option = self => match(self, {\n  onFailure: _ => _Option_js__WEBPACK_IMPORTED_MODULE_10__.none(),\n  onSuccess: _Option_js__WEBPACK_IMPORTED_MODULE_10__.some\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst either = self => match(self, {\n  onFailure: _Either_js__WEBPACK_IMPORTED_MODULE_4__.left,\n  onSuccess: _Either_js__WEBPACK_IMPORTED_MODULE_4__.right\n});\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst retry = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(args => isMicro(args[0]), (self, options) => repeatExit(self, {\n  ...options,\n  while: exit => exit._tag === \"Left\" && exit.left._tag === \"Fail\" && (options?.while === undefined || options.while(exit.left.error))\n}));\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst withTrace = function () {\n  const prevLimit = globalThis.Error.stackTraceLimit;\n  globalThis.Error.stackTraceLimit = 2;\n  const error = new globalThis.Error();\n  globalThis.Error.stackTraceLimit = prevLimit;\n  function generate(name, cause) {\n    const stack = error.stack;\n    if (!stack) {\n      return cause;\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\");\n    if (!line) {\n      return cause;\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/);\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`);\n  }\n  const f = name => self => unsafeMakeOptions(function (env, onExit) {\n    self[runSymbol](env, function (exit) {\n      onExit(exit._tag === \"Left\" ? _Either_js__WEBPACK_IMPORTED_MODULE_4__.left(generate(name, exit.left)) : exit);\n    });\n  }, false);\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0]);\n  }\n  return f(arguments[0]);\n};\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nconst matchCauseEffect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    try {\n      const next = exit._tag === \"Left\" ? options.onFailure(exit.left) : options.onSuccess(exit.right);\n      next[runSymbol](env, onExit);\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n  });\n}));\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nconst matchCause = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => matchCauseEffect(self, {\n  onFailure: cause => sync(() => options.onFailure(cause)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nconst matchEffect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => matchCauseEffect(self, {\n  onFailure: cause => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n  onSuccess: options.onSuccess\n}));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => matchEffect(self, {\n  onFailure: error => sync(() => options.onFailure(error)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst sleep = millis => async(function (resume) {\n  const timeout = setTimeout(function () {\n    resume(void_);\n  }, millis);\n  return sync(() => {\n    return clearTimeout(timeout);\n  });\n});\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst delay = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis) => andThen(sleep(millis), self));\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst timeoutOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, options) => raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout)));\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst timeout = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis) => timeoutOrElse(self, {\n  duration: millis,\n  onTimeout: () => fail(new TimeoutException())\n}));\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst timeoutOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, millis) => raceFirst(asSome(self), as(interruptible(sleep(millis)), _Option_js__WEBPACK_IMPORTED_MODULE_10__.none())));\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst MicroScopeTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/MicroScope\");\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst MicroScope = /*#__PURE__*/_Context_js__WEBPACK_IMPORTED_MODULE_5__.GenericTag(\"effect/Micro/MicroScope\");\nclass MicroScopeImpl {\n  [MicroScopeTypeId];\n  state = {\n    _tag: \"Open\",\n    finalizers: /*#__PURE__*/new Set()\n  };\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId;\n  }\n  unsafeAddFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer);\n    }\n  }\n  addFinalizer(finalizer) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer);\n        return void_;\n      }\n      return finalizer(this.state.exit);\n    });\n  }\n  unsafeRemoveFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer);\n    }\n  }\n  close(microExit) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse();\n        this.state = {\n          _tag: \"Closed\",\n          exit: microExit\n        };\n        return flatMap(forEach(finalizers, finalizer => exit(finalizer(microExit))), exits => asVoid(fromExit(_Either_js__WEBPACK_IMPORTED_MODULE_4__.all(exits))));\n      }\n      return void_;\n    });\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl();\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state;\n        return newScope;\n      }\n      function fin(exit) {\n        return newScope.close(exit);\n      }\n      this.state.finalizers.add(fin);\n      newScope.unsafeAddFinalizer(_ => sync(() => this.unsafeRemoveFinalizer(fin)));\n      return newScope;\n    });\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scopeMake = /*#__PURE__*/sync(() => new MicroScopeImpl());\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scopeUnsafeMake = () => new MicroScopeImpl();\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scope = /*#__PURE__*/service(MicroScope);\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst provideScope = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, scope) => provideService(self, MicroScope, scope));\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scoped = self => suspend(function () {\n  const scope = new MicroScopeImpl();\n  return onExit(provideService(self, MicroScope, scope), exit => scope.close(exit));\n});\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst acquireRelease = (acquire, release) => uninterruptible(flatMap(scope, scope => tap(acquire, a => scope.addFinalizer(exit => release(a, exit)))));\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst addFinalizer = finalizer => flatMap(scope, scope => scope.addFinalizer(finalizer));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nconst onExit = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => onExitIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_1__.constTrue, f));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nconst onExitIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, refinement, f) => uninterruptibleMask(restore => make(function (env, onExit) {\n  restore(self)[runSymbol](env, function (exit) {\n    if (!refinement(exit)) {\n      return onExit(exit);\n    }\n    f(exit)[runSymbol](env, function (finalizerExit) {\n      if (finalizerExit._tag === \"Left\") {\n        return onExit(finalizerExit);\n      }\n      onExit(exit);\n    });\n  });\n})));\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst ensuring = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, finalizer) => onExit(self, _ => finalizer));\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nconst onError = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => onExitIf(self, exitIsFailure, exit => f(exit.left)));\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nconst onInterrupt = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, finalizer) => onExitIf(self, exitIsInterrupt, _ => finalizer));\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst acquireUseRelease = (acquire, use, release) => uninterruptibleMask(restore => flatMap(acquire, a => flatMap(exit(restore(use(a))), exit => andThen(release(a, exit), fromExit(exit)))));\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nconst interrupt = /*#__PURE__*/make(function (env, onExit) {\n  const controller = envGet(env, currentAbortController);\n  controller.abort();\n  onExit(exitInterrupt);\n});\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nconst uninterruptible = self => unsafeMakeOptions(function (env, onExit) {\n  const nextEnv = envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  });\n  self[runSymbol](nextEnv, onExit);\n}, false);\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nconst uninterruptibleMask = f => unsafeMakeOptions((env, onExit) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  const effect = isInterruptible ? f(interruptible) : f(_Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n  const nextEnv = isInterruptible ? envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  }) : env;\n  effect[runSymbol](nextEnv, onExit);\n}, false);\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nconst interruptible = self => make((env, onExit) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  let newEnv = env;\n  if (!isInterruptible) {\n    const controller = envGet(env, currentAbortController);\n    newEnv = envMutate(env, function (env) {\n      env[currentInterruptible.key] = true;\n      env[currentAbortSignal.key] = controller.signal;\n      return env;\n    });\n  }\n  self[runSymbol](newEnv, onExit);\n});\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst all = (arg, options) => {\n  if (Array.isArray(arg) || (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isIterable)(arg)) {\n    return forEach(arg, _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity, options);\n  } else if (options?.discard) {\n    return forEach(Object.values(arg), _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity, options);\n  }\n  return suspend(() => {\n    const out = {};\n    return as(forEach(Object.entries(arg), ([key, effect]) => map(effect, value => {\n      out[key] = value;\n    }), {\n      discard: true,\n      concurrency: options?.concurrency\n    }), out);\n  });\n};\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst forEach = (iterable, f, options) => make(function (env, onExit) {\n  const concurrencyOption = options?.concurrency === \"inherit\" ? envGet(env, currentConcurrency) : options?.concurrency ?? 1;\n  const concurrency = concurrencyOption === \"unbounded\" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);\n  // abort\n  const [envWithSignal, onAbort] = forkSignal(env);\n  // iterate\n  let result = undefined;\n  const items = Array.from(iterable);\n  let length = items.length;\n  if (length === 0) {\n    return onExit(_Either_js__WEBPACK_IMPORTED_MODULE_4__.right(options?.discard ? undefined : []));\n  }\n  const out = options?.discard ? undefined : new Array(length);\n  let index = 0;\n  let inProgress = 0;\n  let doneCount = 0;\n  let pumping = false;\n  function pump() {\n    pumping = true;\n    while (inProgress < concurrency && index < length) {\n      const currentIndex = index;\n      const item = items[currentIndex];\n      index++;\n      inProgress++;\n      try {\n        f(item, currentIndex)[runSymbol](envWithSignal, function (exit) {\n          if (exit._tag === \"Left\") {\n            if (result === undefined) {\n              result = exit;\n              length = index;\n              onAbort();\n            }\n          } else if (out !== undefined) {\n            out[currentIndex] = exit.right;\n          }\n          doneCount++;\n          inProgress--;\n          if (doneCount === length) {\n            onExit(result ?? _Either_js__WEBPACK_IMPORTED_MODULE_4__.right(out));\n          } else if (!pumping && inProgress < concurrency) {\n            pump();\n          }\n        });\n      } catch (err) {\n        result = exitDie(err);\n        length = index;\n        onAbort();\n      }\n    }\n    pumping = false;\n  }\n  pump();\n});\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst filter = (iterable, f, options) => filterMap(iterable, a => map(f(a), pass => {\n  pass = options?.negate ? !pass : pass;\n  return pass ? _Option_js__WEBPACK_IMPORTED_MODULE_10__.some(a) : _Option_js__WEBPACK_IMPORTED_MODULE_10__.none();\n}), options);\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst filterMap = (iterable, f, options) => suspend(() => {\n  const out = [];\n  return as(forEach(iterable, a => map(f(a), o => {\n    if (o._tag === \"Some\") {\n      out.push(o.value);\n    }\n  }), {\n    discard: true,\n    concurrency: options?.concurrency\n  }), out);\n});\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst Do = /*#__PURE__*/succeed({});\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bindTo(map);\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bind(map, flatMap);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.let_(map);\n\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst HandleTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Handle\");\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst isHandle = u => typeof u === \"object\" && u !== null && HandleTypeId in u;\nclass HandleImpl {\n  parentSignal;\n  [HandleTypeId];\n  observers = /*#__PURE__*/new Set();\n  _exit = undefined;\n  _controller;\n  isRoot;\n  constructor(parentSignal, controller) {\n    this.parentSignal = parentSignal;\n    this[HandleTypeId] = HandleTypeId;\n    this.isRoot = controller !== undefined;\n    this._controller = controller ?? new AbortController();\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeInterrupt);\n    }\n  }\n  unsafePoll() {\n    return this._exit ?? null;\n  }\n  unsafeInterrupt = () => {\n    this._controller.abort();\n  };\n  emit(exit) {\n    if (this._exit) {\n      return;\n    }\n    this._exit = exit;\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeInterrupt);\n    }\n    this.observers.forEach(observer => observer(exit));\n    this.observers.clear();\n  }\n  addObserver(observer) {\n    if (this._exit) {\n      return observer(this._exit);\n    }\n    this.observers.add(observer);\n  }\n  removeObserver(observer) {\n    this.observers.delete(observer);\n  }\n  get await() {\n    return suspend(() => {\n      if (this._exit) {\n        return succeed(this._exit);\n      }\n      return async(resume => {\n        function observer(exit) {\n          resume(succeed(exit));\n        }\n        this.addObserver(observer);\n        return sync(() => {\n          this.removeObserver(observer);\n        });\n      });\n    });\n  }\n  get join() {\n    return flatMap(this.await, fromExit);\n  }\n  get interrupt() {\n    return suspend(() => {\n      this.unsafeInterrupt();\n      return this.await;\n    });\n  }\n}\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst fork = self => make(function (env, onExit) {\n  const signal = envGet(env, currentAbortSignal);\n  const handle = new HandleImpl(signal);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = handle._controller;\n    map[currentAbortSignal.key] = handle._controller.signal;\n    return map;\n  });\n  envGet(env, currentScheduler).scheduleTask(() => {\n    self[runSymbol](nextEnv, exit => {\n      handle.emit(exit);\n    });\n  }, 0);\n  onExit(_Either_js__WEBPACK_IMPORTED_MODULE_4__.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkDaemon = self => make(function (env, onExit) {\n  const controller = new AbortController();\n  const handle = new HandleImpl(controller.signal, controller);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = controller;\n    map[currentAbortSignal.key] = controller.signal;\n    return map;\n  });\n  envGet(env, currentScheduler).scheduleTask(() => {\n    self[runSymbol](nextEnv, exit => {\n      handle.emit(exit);\n    });\n  }, 0);\n  onExit(_Either_js__WEBPACK_IMPORTED_MODULE_4__.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkIn = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, scope) => uninterruptibleMask(restore => flatMap(scope.fork, scope => tap(restore(forkDaemon(onExit(self, exit => scope.close(exit)))), fiber => scope.addFinalizer(_ => asVoid(fiber.interrupt))))));\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkScoped = self => flatMap(scope, scope => forkIn(self, scope));\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n */\nconst runFork = (effect, options) => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  refs[currentScheduler.key] = options?.scheduler ?? new MicroSchedulerDefault();\n  const env = envMake(refs);\n  const handle = new HandleImpl(controller.signal, controller);\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), exit => {\n    handle.emit(exit);\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeInterrupt);\n    }\n  });\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeInterrupt();\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeInterrupt, {\n        once: true\n      });\n    }\n  }\n  return handle;\n};\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nconst runPromiseExit = (effect, options) => new Promise((resolve, _reject) => {\n  const handle = runFork(effect, options);\n  handle.addObserver(resolve);\n});\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runPromise = (effect, options) => runPromiseExit(effect, options).then(exit => {\n  if (exit._tag === \"Left\") {\n    throw exit.left;\n  }\n  return exit.right;\n});\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `Handle`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nconst runSyncExit = effect => {\n  const scheduler = new MicroSchedulerDefault();\n  const handle = runFork(effect, {\n    scheduler\n  });\n  scheduler.flush();\n  const exit = handle.unsafePoll();\n  if (exit === null) {\n    return exitDie(handle);\n  }\n  return exit;\n};\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runSync = effect => {\n  const exit = runSyncExit(effect);\n  if (exit._tag === \"Left\") {\n    throw exit.left;\n  }\n  return exit.right;\n};\nconst YieldableError = /*#__PURE__*/function () {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env, onExit) {\n      onExit(exitFail(this));\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name;\n    }\n    toJSON() {\n      return {\n        ...this\n      };\n    }\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_2__.NodeInspectSymbol]() {\n      const stack = this.stack;\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n      }\n      return this.toString();\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, _internal_effectable_js__WEBPACK_IMPORTED_MODULE_12__.StructuralPrototype);\n  return YieldableError;\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nconst Error = /*#__PURE__*/function () {\n  return class extends YieldableError {\n    constructor(args) {\n      super();\n      if (args) {\n        Object.assign(this, args);\n      }\n    }\n  };\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nconst TaggedError = tag => {\n  class Base extends Error {\n    _tag = tag;\n  }\n  ;\n  Base.prototype.name = tag;\n  return Base;\n};\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nclass NoSuchElementException extends /*#__PURE__*/TaggedError(\"NoSuchElementException\") {}\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nclass TimeoutException extends /*#__PURE__*/TaggedError(\"TimeoutException\") {}\n//# sourceMappingURL=Micro.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Micro.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Option.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Option.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   composeK: () => (/* binding */ composeK),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   firstSomeOf: () => (/* binding */ firstSomeOf),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   fromIterable: () => (/* binding */ fromIterable),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   lift2: () => (/* binding */ lift2),\n/* harmony export */   liftNullable: () => (/* binding */ liftNullable),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   liftThrowable: () => (/* binding */ liftThrowable),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   orElseEither: () => (/* binding */ orElseEither),\n/* harmony export */   orElseSome: () => (/* binding */ orElseSome),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reduceCompact: () => (/* binding */ reduceCompact),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toRefinement: () => (/* binding */ toRefinement),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   zipLeft: () => (/* binding */ zipLeft),\n/* harmony export */   zipRight: () => (/* binding */ zipRight),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _internal_option_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n\n\n\n\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst none = () => _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none;\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst some = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some;\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isOption = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isOption;\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNone = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isNone;\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSome = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isSome;\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onNone,\n  onSome\n}) => isNone(self) ? onNone() : onSome(self.value));\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nconst toRefinement = f => a => isSome(f(a));\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromIterable = collection => {\n  for (const a of collection) {\n    return some(a);\n  }\n  return none();\n};\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getLeft;\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => isNone(self) ? onNone() : self.value);\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isNone(self) ? that() : self);\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElseSome = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => isNone(self) ? some(onNone()) : self);\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElseEither = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isNone(self) ? map(that(), _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.right) : map(self, _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.left));\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nconst firstSomeOf = collection => {\n  let out = none();\n  for (out of collection) {\n    if (isSome(out)) {\n      return out;\n    }\n  }\n  return out;\n};\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst fromNullable = nullableValue => nullableValue == null ? none() : some(nullableValue);\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst liftNullable = f => (...a) => fromNullable(f(...a));\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrNull = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrUndefined = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst liftThrowable = f => (...a) => {\n  try {\n    return some(f(...a));\n  } catch (e) {\n    return none();\n  }\n};\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getOrThrowWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => {\n  if (isSome(self)) {\n    return self.value;\n  }\n  throw onNone();\n});\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a None\"));\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : some(f(self.value)));\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst as = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, b) => map(self, () => b));\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst asVoid = /*#__PURE__*/as(undefined);\nconst void_ = /*#__PURE__*/some(undefined);\n\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => {\n  const b = (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(f) ? f(a) : f;\n  return isOption(b) ? b : some(b);\n}));\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMapNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : fromNullable(f(self.value)));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst flatten = /*#__PURE__*/flatMap(_Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n/**\n * @category zipping\n * @since 2.0.0\n */\nconst zipRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => flatMap(self, () => that));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst composeK = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (afb, bfc) => a => flatMap(afb(a), bfc));\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => tap(self, () => that));\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst tap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => map(f(a), () => a)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = (self, that) => isSome(self) && isSome(that) ? some([self.value, that.value]) : none();\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  if (isNone(self)) {\n    return none();\n  }\n  const out = [self.value];\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none();\n    }\n    out.push(o.value);\n  }\n  return some(out);\n};\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nconst all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const o of input) {\n      if (isNone(o)) {\n        return none();\n      }\n      out.push(o.value);\n    }\n    return some(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const o = input[key];\n    if (isNone(o)) {\n      return none();\n    }\n    out[key] = o.value;\n  }\n  return some(out);\n};\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f) => map(product(self, that), ([a, b]) => f(a, b)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst ap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nconst reduceCompact = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, b, f) => {\n  let out = b;\n  for (const oa of self) {\n    if (isSome(oa)) {\n      out = f(out, oa.value);\n    }\n  }\n  return out;\n});\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst toArray = self => isNone(self) ? [] : [self.value];\n/**\n * @category filtering\n * @since 2.0.0\n */\nconst partitionMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => {\n  if (isNone(self)) {\n    return [none(), none()];\n  }\n  const e = f(self.value);\n  return _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)];\n});\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filterMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filter = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, predicate) => filterMap(self, b => predicate(b) ? _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some(b) : _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none));\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nconst getEquivalence = isEquivalent => _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value));\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nconst getOrder = O => _Order_js__WEBPACK_IMPORTED_MODULE_4__.make((self, that) => isSome(self) ? isSome(that) ? O(self.value, that.value) : 1 : -1);\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nconst lift2 = f => (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, f));\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nconst liftPredicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (b, predicate) => predicate(b) ? some(b) : none());\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nconst containsWith = isEquivalent => (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, a) => isNone(self) ? false : isEquivalent(self.value, a));\nconst _equivalence = /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_5__.equivalence();\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nconst contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nconst exists = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, refinement) => isNone(self) ? false : refinement(self.value));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bindTo(map);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.let_(map);\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst Do = /*#__PURE__*/some({});\nconst adapter = /*#__PURE__*/_Utils_js__WEBPACK_IMPORTED_MODULE_7__.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nconst gen = (...args) => {\n  let f;\n  if (args.length === 1) {\n    f = args[0];\n  } else {\n    f = args[1].bind(args[0]);\n  }\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return some(state.value);\n  } else {\n    let current = state.value;\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_7__.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = _Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet(current);\n    }\n    if (isNone(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.value);\n      if (!state.done) {\n        current = state.value;\n        if (_Utils_js__WEBPACK_IMPORTED_MODULE_7__.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = _Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet(current);\n        }\n        if (isNone(current)) {\n          return current;\n        }\n      }\n    }\n    return some(state.value);\n  }\n};\n//# sourceMappingURL=Option.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Order.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Order.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanOrEqualTo: () => (/* binding */ greaterThanOrEqualTo),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanOrEqualTo: () => (/* binding */ lessThanOrEqualTo),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst make = compare => (self, that) => self === that ? 0 : compare(self, that);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst string = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst number = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst boolean = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst bigint = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @since 2.0.0\n */\nconst reverse = O => make((self, that) => O(that, self));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combine = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make((a1, a2) => {\n  const out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  return that(a1, a2);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => make((a1, a2) => {\n  let out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  for (const O of collection) {\n    out = O(a1, a2);\n    if (out !== 0) {\n      return out;\n    }\n  }\n  return out;\n}));\n/**\n * @since 2.0.0\n */\nconst empty = () => make(() => 0);\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineAll = collection => combineMany(empty(), collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make((b1, b2) => self(f(b1), f(b2))));\n/**\n * @category instances\n * @since 2.0.0\n */\nconst Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make(([xa, xb], [ya, yb]) => {\n  const o = self(xa, ya);\n  return o !== 0 ? o : that(xb, yb);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      const o = O(x[collectionLength], y[collectionLength]);\n      if (o !== 0) {\n        return o;\n      }\n      collectionLength++;\n    }\n    return 0;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => {\n  const O = all(collection);\n  return make((x, y) => {\n    const o = self(x[0], y[0]);\n    return o !== 0 ? o : O(x.slice(1), y.slice(1));\n  });\n});\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst array = O => make((self, that) => {\n  const aLen = self.length;\n  const bLen = that.length;\n  const len = Math.min(aLen, bLen);\n  for (let i = 0; i < len; i++) {\n    const o = O(self[i], that[i]);\n    if (o !== 0) {\n      return o;\n    }\n  }\n  return number(aLen, bLen);\n});\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key]);\n      if (o !== 0) {\n        return o;\n      }\n    }\n    return 0;\n  });\n};\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nconst lessThan = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) === -1);\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nconst greaterThan = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) === 1);\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nconst lessThanOrEqualTo = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) !== 1);\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nconst greaterThanOrEqualTo = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) !== -1);\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nconst min = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => self === that || O(self, that) < 1 ? self : that);\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nconst max = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => self === that || O(self, that) > -1 ? self : that);\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nconst clamp = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => min(O)(options.maximum, max(O)(options.minimum, self)));\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nconst between = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum));\n//# sourceMappingURL=Order.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL09yZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlDQUFpQyxrREFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGtEQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixrREFBSTtBQUN4QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsa0RBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxzQkFBc0Isa0RBQUk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlCQUF5QixrREFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLGtEQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxrQ0FBa0Msa0RBQUk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlCQUFpQixrREFBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08saUJBQWlCLGtEQUFJO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSw2Q0FBNkMsd0JBQXdCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLGtEQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsa0RBQUk7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vT3JkZXIuanM/NGMzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgT3JkZXJgIHR5cGUgY2xhc3Mgd2hpY2ggaXMgdXNlZCB0byBkZWZpbmUgYSB0b3RhbCBvcmRlcmluZyBvbiBzb21lIHR5cGUgYEFgLlxuICogQW4gb3JkZXIgaXMgZGVmaW5lZCBieSBhIHJlbGF0aW9uIGA8PWAsIHdoaWNoIG9iZXlzIHRoZSBmb2xsb3dpbmcgbGF3czpcbiAqXG4gKiAtIGVpdGhlciBgeCA8PSB5YCBvciBgeSA8PSB4YCAodG90YWxpdHkpXG4gKiAtIGlmIGB4IDw9IHlgIGFuZCBgeSA8PSB4YCwgdGhlbiBgeCA9PSB5YCAoYW50aXN5bW1ldHJ5KVxuICogLSBpZiBgeCA8PSB5YCBhbmQgYHkgPD0gemAsIHRoZW4gYHggPD0gemAgKHRyYW5zaXRpdml0eSlcbiAqXG4gKiBUaGUgdHJ1dGggdGFibGUgZm9yIGNvbXBhcmUgaXMgZGVmaW5lZCBhcyBmb2xsb3dzOlxuICpcbiAqIHwgYHggPD0geWAgfCBgeCA+PSB5YCB8IE9yZGVyaW5nIHwgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0gfCAtLS0tLS0tLSB8IC0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgYHRydWVgICAgfCBgdHJ1ZWAgICB8IGAwYCAgICAgIHwgY29ycmVzcG9uZHMgdG8geCA9PSB5IHxcbiAqIHwgYHRydWVgICAgfCBgZmFsc2VgICB8IGA8IDBgICAgIHwgY29ycmVzcG9uZHMgdG8geCA8IHkgIHxcbiAqIHwgYGZhbHNlYCAgfCBgdHJ1ZWAgICB8IGA+IDBgICAgIHwgY29ycmVzcG9uZHMgdG8geCA+IHkgIHxcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0IHsgZHVhbCB9IGZyb20gXCIuL0Z1bmN0aW9uLmpzXCI7XG4vKipcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWFrZSA9IGNvbXBhcmUgPT4gKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgPyAwIDogY29tcGFyZShzZWxmLCB0aGF0KTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSAvKiNfX1BVUkVfXyovbWFrZSgoc2VsZiwgdGhhdCkgPT4gc2VsZiA8IHRoYXQgPyAtMSA6IDEpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IC8qI19fUFVSRV9fKi9tYWtlKChzZWxmLCB0aGF0KSA9PiBzZWxmIDwgdGhhdCA/IC0xIDogMSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYm9vbGVhbiA9IC8qI19fUFVSRV9fKi9tYWtlKChzZWxmLCB0aGF0KSA9PiBzZWxmIDwgdGhhdCA/IC0xIDogMSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYmlnaW50ID0gLyojX19QVVJFX18qL21ha2UoKHNlbGYsIHRoYXQpID0+IHNlbGYgPCB0aGF0ID8gLTEgOiAxKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCByZXZlcnNlID0gTyA9PiBtYWtlKChzZWxmLCB0aGF0KSA9PiBPKHRoYXQsIHNlbGYpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IG1ha2UoKGExLCBhMikgPT4ge1xuICBjb25zdCBvdXQgPSBzZWxmKGExLCBhMik7XG4gIGlmIChvdXQgIT09IDApIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHJldHVybiB0aGF0KGExLCBhMik7XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgY29tYmluZU1hbnkgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgY29sbGVjdGlvbikgPT4gbWFrZSgoYTEsIGEyKSA9PiB7XG4gIGxldCBvdXQgPSBzZWxmKGExLCBhMik7XG4gIGlmIChvdXQgIT09IDApIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGZvciAoY29uc3QgTyBvZiBjb2xsZWN0aW9uKSB7XG4gICAgb3V0ID0gTyhhMSwgYTIpO1xuICAgIGlmIChvdXQgIT09IDApIHtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59KSk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW1wdHkgPSAoKSA9PiBtYWtlKCgpID0+IDApO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29tYmluaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbWJpbmVBbGwgPSBjb2xsZWN0aW9uID0+IGNvbWJpbmVNYW55KGVtcHR5KCksIGNvbGxlY3Rpb24pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbWFwcGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBJbnB1dCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiBtYWtlKChiMSwgYjIpID0+IHNlbGYoZihiMSksIGYoYjIpKSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERhdGUgPSAvKiNfX1BVUkVfXyovbWFwSW5wdXQobnVtYmVyLCBkYXRlID0+IGRhdGUuZ2V0VGltZSgpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWN0ID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IG1ha2UoKFt4YSwgeGJdLCBbeWEsIHliXSkgPT4ge1xuICBjb25zdCBvID0gc2VsZih4YSwgeWEpO1xuICByZXR1cm4gbyAhPT0gMCA/IG8gOiB0aGF0KHhiLCB5Yik7XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYWxsID0gY29sbGVjdGlvbiA9PiB7XG4gIHJldHVybiBtYWtlKCh4LCB5KSA9PiB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oeC5sZW5ndGgsIHkubGVuZ3RoKTtcbiAgICBsZXQgY29sbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgZm9yIChjb25zdCBPIG9mIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID49IGxlbikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG8gPSBPKHhbY29sbGVjdGlvbkxlbmd0aF0sIHlbY29sbGVjdGlvbkxlbmd0aF0pO1xuICAgICAgaWYgKG8gIT09IDApIHtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9XG4gICAgICBjb2xsZWN0aW9uTGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9KTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgcHJvZHVjdE1hbnkgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgY29sbGVjdGlvbikgPT4ge1xuICBjb25zdCBPID0gYWxsKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gbWFrZSgoeCwgeSkgPT4ge1xuICAgIGNvbnN0IG8gPSBzZWxmKHhbMF0sIHlbMF0pO1xuICAgIHJldHVybiBvICE9PSAwID8gbyA6IE8oeC5zbGljZSgxKSwgeS5zbGljZSgxKSk7XG4gIH0pO1xufSk7XG4vKipcbiAqIFNpbWlsYXIgdG8gYFByb21pc2UuYWxsYCBidXQgb3BlcmF0ZXMgb24gYE9yZGVyYHMuXG4gKlxuICogYGBgXG4gKiBbT3JkZXI8QT4sIE9yZGVyPEI+LCAuLi5dIC0+IE9yZGVyPFtBLCBCLCAuLi5dPlxuICogYGBgXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGBPcmRlcmAgZm9yIGEgdHVwbGUgb2YgdmFsdWVzIGJhc2VkIG9uIHRoZSBnaXZlbiBgT3JkZXJgcyBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSB0dXBsZS5cbiAqIFRoZSByZXR1cm5lZCBgT3JkZXJgIGNvbXBhcmVzIHR3byB0dXBsZXMgb2YgdGhlIHNhbWUgdHlwZSBieSBhcHBseWluZyB0aGUgY29ycmVzcG9uZGluZyBgT3JkZXJgIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgdHVwbGUuXG4gKiBJdCBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byBjb21wYXJlIHR3byB0dXBsZXMgb2YgdGhlIHNhbWUgdHlwZSBhbmQgeW91IGhhdmUgYSBzcGVjaWZpYyB3YXkgb2YgY29tcGFyaW5nIGVhY2ggZWxlbWVudFxuICogb2YgdGhlIHR1cGxlLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0dXBsZSA9ICguLi5lbGVtZW50cykgPT4gYWxsKGVsZW1lbnRzKTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGBPcmRlcmAgZm9yIGFuIGFycmF5IG9mIHZhbHVlcyBiYXNlZCBvbiBhIGdpdmVuIGBPcmRlcmAgZm9yIHRoZSBlbGVtZW50cyBvZiB0aGUgYXJyYXkuXG4gKiBUaGUgcmV0dXJuZWQgYE9yZGVyYCBjb21wYXJlcyB0d28gYXJyYXlzIGJ5IGFwcGx5aW5nIHRoZSBnaXZlbiBgT3JkZXJgIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXlzLlxuICogSWYgYWxsIGVsZW1lbnRzIGFyZSBlcXVhbCwgdGhlIGFycmF5cyBhcmUgdGhlbiBjb21wYXJlZCBiYXNlZCBvbiB0aGVpciBsZW5ndGguXG4gKiBJdCBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byBjb21wYXJlIHR3byBhcnJheXMgb2YgdGhlIHNhbWUgdHlwZSBhbmQgeW91IGhhdmUgYSBzcGVjaWZpYyB3YXkgb2YgY29tcGFyaW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkuXG4gKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGFycmF5ID0gTyA9PiBtYWtlKChzZWxmLCB0aGF0KSA9PiB7XG4gIGNvbnN0IGFMZW4gPSBzZWxmLmxlbmd0aDtcbiAgY29uc3QgYkxlbiA9IHRoYXQubGVuZ3RoO1xuICBjb25zdCBsZW4gPSBNYXRoLm1pbihhTGVuLCBiTGVuKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IG8gPSBPKHNlbGZbaV0sIHRoYXRbaV0pO1xuICAgIGlmIChvICE9PSAwKSB7XG4gICAgICByZXR1cm4gbztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlcihhTGVuLCBiTGVuKTtcbn0pO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYE9yZGVyYCBmb3IgYSBzdHJ1Y3Qgb2YgdmFsdWVzIGJhc2VkIG9uIHRoZSBnaXZlbiBgT3JkZXJgc1xuICogZm9yIGVhY2ggcHJvcGVydHkgaW4gdGhlIHN0cnVjdC5cbiAqXG4gKiBAY2F0ZWdvcnkgY29tYmluYXRvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3RydWN0ID0gZmllbGRzID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XG4gIHJldHVybiBtYWtlKChzZWxmLCB0aGF0KSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgY29uc3QgbyA9IGZpZWxkc1trZXldKHNlbGZba2V5XSwgdGhhdFtrZXldKTtcbiAgICAgIGlmIChvICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSk7XG59O1xuLyoqXG4gKiBUZXN0IHdoZXRoZXIgb25lIHZhbHVlIGlzIF9zdHJpY3RseSBsZXNzIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbiA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSA9PT0gLTEpO1xuLyoqXG4gKiBUZXN0IHdoZXRoZXIgb25lIHZhbHVlIGlzIF9zdHJpY3RseSBncmVhdGVyIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbiA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSA9PT0gMSk7XG4vKipcbiAqIFRlc3Qgd2hldGhlciBvbmUgdmFsdWUgaXMgX25vbi1zdHJpY3RseSBsZXNzIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbk9yRXF1YWxUbyA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSAhPT0gMSk7XG4vKipcbiAqIFRlc3Qgd2hldGhlciBvbmUgdmFsdWUgaXMgX25vbi1zdHJpY3RseSBncmVhdGVyIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbk9yRXF1YWxUbyA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSAhPT0gLTEpO1xuLyoqXG4gKiBUYWtlIHRoZSBtaW5pbXVtIG9mIHR3byB2YWx1ZXMuIElmIHRoZXkgYXJlIGNvbnNpZGVyZWQgZXF1YWwsIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBjaG9zZW4uXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtaW4gPSBPID0+IGR1YWwoMiwgKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgfHwgTyhzZWxmLCB0aGF0KSA8IDEgPyBzZWxmIDogdGhhdCk7XG4vKipcbiAqIFRha2UgdGhlIG1heGltdW0gb2YgdHdvIHZhbHVlcy4gSWYgdGhleSBhcmUgY29uc2lkZXJlZCBlcXVhbCwgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGNob3Nlbi5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1heCA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gc2VsZiA9PT0gdGhhdCB8fCBPKHNlbGYsIHRoYXQpID4gLTEgPyBzZWxmIDogdGhhdCk7XG4vKipcbiAqIENsYW1wIGEgdmFsdWUgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgT3JkZXIsIE51bWJlciB9IGZyb20gXCJlZmZlY3RcIlxuICpcbiAqIGNvbnN0IGNsYW1wID0gT3JkZXIuY2xhbXAoTnVtYmVyLk9yZGVyKSh7IG1pbmltdW06IDEsIG1heGltdW06IDUgfSlcbiAqXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoMyksIDMpXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoMCksIDEpXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoNiksIDUpXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFtcCA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgb3B0aW9ucykgPT4gbWluKE8pKG9wdGlvbnMubWF4aW11bSwgbWF4KE8pKG9wdGlvbnMubWluaW11bSwgc2VsZikpKTtcbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgdmFsdWUgaXMgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bSAoaW5jbHVzaXZlKS5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJldHdlZW4gPSBPID0+IGR1YWwoMiwgKHNlbGYsIG9wdGlvbnMpID0+ICFsZXNzVGhhbihPKShzZWxmLCBvcHRpb25zLm1pbmltdW0pICYmICFncmVhdGVyVGhhbihPKShzZWxmLCBvcHRpb25zLm1heGltdW0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9yZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Order.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Pipeable.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Pipeable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipeArguments: () => (/* binding */ pipeArguments)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */\n/**\n * @since 2.0.0\n */\nconst pipeArguments = (self, args) => {\n  switch (args.length) {\n    case 0:\n      return self;\n    case 1:\n      return args[0](self);\n    case 2:\n      return args[1](args[0](self));\n    case 3:\n      return args[2](args[1](args[0](self)));\n    case 4:\n      return args[3](args[2](args[1](args[0](self))));\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))));\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))));\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));\n    default:\n      {\n        let ret = self;\n        for (let i = 0, len = args.length; i < len; i++) {\n          ret = args[i](ret);\n        }\n        return ret;\n      }\n  }\n};\n//# sourceMappingURL=Pipeable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL1BpcGVhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxTQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZS1sZWFybmluZy13ZWJhcHBsaWNhdGlvbi1sbXMvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL1BpcGVhYmxlLmpzP2M1ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBpcGVBcmd1bWVudHMgPSAoc2VsZiwgYXJncykgPT4ge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGFyZ3NbMF0oc2VsZik7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGFyZ3NbMV0oYXJnc1swXShzZWxmKSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSk7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSk7XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGFyZ3NbNF0oYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKSk7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGFyZ3NbNV0oYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKSk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIGFyZ3NbNl0oYXJnc1s1XShhcmdzWzRdKGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSkpKSk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGFyZ3NbN10oYXJnc1s2XShhcmdzWzVdKGFyZ3NbNF0oYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKSkpKSk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIGFyZ3NbOF0oYXJnc1s3XShhcmdzWzZdKGFyZ3NbNV0oYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKSkpKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgbGV0IHJldCA9IHNlbGY7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcmV0ID0gYXJnc1tpXShyZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaXBlYWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Pipeable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Predicate.js":
/*!***************************************************!*\
  !*** ./node_modules/effect/dist/esm/Predicate.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   and: () => (/* binding */ and),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   eqv: () => (/* binding */ eqv),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   hasProperty: () => (/* binding */ hasProperty),\n/* harmony export */   implies: () => (/* binding */ implies),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDate: () => (/* binding */ isDate),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isNever: () => (/* binding */ isNever),\n/* harmony export */   isNotNull: () => (/* binding */ isNotNull),\n/* harmony export */   isNotNullable: () => (/* binding */ isNotNullable),\n/* harmony export */   isNotUndefined: () => (/* binding */ isNotUndefined),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNullable: () => (/* binding */ isNullable),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isReadonlyRecord: () => (/* binding */ isReadonlyRecord),\n/* harmony export */   isRecord: () => (/* binding */ isRecord),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSymbol: () => (/* binding */ isSymbol),\n/* harmony export */   isTagged: () => (/* binding */ isTagged),\n/* harmony export */   isTruthy: () => (/* binding */ isTruthy),\n/* harmony export */   isTupleOf: () => (/* binding */ isTupleOf),\n/* harmony export */   isTupleOfAtLeast: () => (/* binding */ isTupleOfAtLeast),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUnknown: () => (/* binding */ isUnknown),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   nand: () => (/* binding */ nand),\n/* harmony export */   nor: () => (/* binding */ nor),\n/* harmony export */   not: () => (/* binding */ not),\n/* harmony export */   or: () => (/* binding */ or),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   xor: () => (/* binding */ xor)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * @since 2.0.0\n */\n\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => b => self(f(b)));\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nconst isTupleOf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => self.length === n);\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nconst isTupleOfAtLeast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => self.length >= n);\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isTruthy = input => !!input;\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSet = input => input instanceof Set;\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isMap = input => input instanceof Map;\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isString = input => typeof input === \"string\";\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNumber = input => typeof input === \"number\";\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isBoolean = input => typeof input === \"boolean\";\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isBigInt = input => typeof input === \"bigint\";\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSymbol = input => typeof input === \"symbol\";\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isFunction = _Function_js__WEBPACK_IMPORTED_MODULE_0__.isFunction;\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUndefined = input => input === undefined;\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotUndefined = input => input !== undefined;\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNull = input => input === null;\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotNull = input => input !== null;\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNever = _ => false;\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUnknown = _ => true;\nconst isRecordOrArray = input => typeof input === \"object\" && input !== null;\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isObject = input => isRecordOrArray(input) || isFunction(input);\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nconst hasProperty = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, property) => isObject(self) && property in self);\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isTagged = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, tag) => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag);\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNullable = input => input === null || input === undefined;\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotNullable = input => input !== null && input !== undefined;\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isError = input => input instanceof Error;\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUint8Array = input => input instanceof Uint8Array;\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isDate = input => input instanceof Date;\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isIterable = input => hasProperty(input, Symbol.iterator);\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isRecord = input => isRecordOrArray(input) && !Array.isArray(input);\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isReadonlyRecord = isRecord;\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isPromise = input => hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch);\n/**\n * @category guards\n * @since 2.0.0\n */\nconst isPromiseLike = input => hasProperty(input, \"then\") && isFunction(input.then);\n/**\n * @since 2.0.0\n */\nconst compose = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (ab, bc) => a => ab(a) && bc(a));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = (self, that) => ([a, b]) => self(a) && that(b);\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return as => {\n    let collectionIndex = 0;\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break;\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false;\n      }\n      collectionIndex++;\n    }\n    return true;\n  };\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  const rest = all(collection);\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail);\n};\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * ```\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: С; ... }>\n * ```\n *\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return a => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst not = self => a => !self(a);\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst or = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) || that(a));\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst and = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) && that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst xor = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) !== that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst eqv = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) === that(a));\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst implies = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (antecedent, consequent) => a => antecedent(a) ? consequent(a) : true);\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst nor = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => !(self(a) || that(a)));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst nand = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => !(self(a) && that(a)));\n/**\n * @category elements\n * @since 2.0.0\n */\nconst every = collection => a => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * @category elements\n * @since 2.0.0\n */\nconst some = collection => a => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true;\n    }\n  }\n  return false;\n};\n//# sourceMappingURL=Predicate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Predicate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Utils.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenKindImpl: () => (/* binding */ GenKindImpl),\n/* harmony export */   GenKindTypeId: () => (/* binding */ GenKindTypeId),\n/* harmony export */   PCGRandom: () => (/* binding */ PCGRandom),\n/* harmony export */   SingleShotGen: () => (/* binding */ SingleShotGen),\n/* harmony export */   YieldWrap: () => (/* binding */ YieldWrap),\n/* harmony export */   YieldWrapTypeId: () => (/* binding */ YieldWrapTypeId),\n/* harmony export */   adapter: () => (/* binding */ adapter),\n/* harmony export */   internalCall: () => (/* binding */ internalCall),\n/* harmony export */   isGenKind: () => (/* binding */ isGenKind),\n/* harmony export */   makeGenKind: () => (/* binding */ makeGenKind),\n/* harmony export */   structuralRegion: () => (/* binding */ structuralRegion),\n/* harmony export */   structuralRegionState: () => (/* binding */ structuralRegionState),\n/* harmony export */   yieldWrapGet: () => (/* binding */ yieldWrapGet)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/errors.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/errors.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst GenKindTypeId = /*#__PURE__*/Symbol.for(\"effect/Gen/GenKind\");\n/**\n * @category predicates\n * @since 3.0.6\n */\nconst isGenKind = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(u) && GenKindTypeId in u;\n/**\n * @category constructors\n * @since 2.0.0\n */\nclass GenKindImpl {\n  value;\n  constructor(\n  /**\n   * @since 2.0.0\n   */\n  value) {\n    this.value = value;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [GenKindTypeId] = GenKindTypeId;\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nclass SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  /**\n   * @since 2.0.0\n   */\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  /**\n   * @since 2.0.0\n   */\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  /**\n   * @since 2.0.0\n   */\n  throw(e) {\n    throw e;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst makeGenKind = kind => new GenKindImpl(kind);\n/**\n * @category adapters\n * @since 2.0.0\n */\nconst adapter = () => function () {\n  let x = arguments[0];\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x);\n  }\n  return new GenKindImpl(x);\n};\nconst defaultIncHi = 0x14057b7e;\nconst defaultIncLo = 0xf767814f;\nconst MUL_HI = 0x5851f42d >>> 0;\nconst MUL_LO = 0x4c957f2d >>> 0;\nconst BIT_53 = 9007199254740992.0;\nconst BIT_27 = 134217728.0;\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nclass PCGRandom {\n  _state;\n  constructor(seedHi, seedLo, incHi, incLo) {\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedHi)) {\n      seedLo = Math.random() * 0xffffffff >>> 0;\n      seedHi = 0;\n    } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo)) {\n      seedLo = seedHi;\n      seedHi = 0;\n    }\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo;\n      incHi = this._state ? this._state[2] : defaultIncHi;\n    } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo)) {\n      incLo = incHi;\n      incHi = 0;\n    }\n    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);\n    this._next();\n    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);\n    this._next();\n    return this;\n  }\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState() {\n    return [this._state[0], this._state[1], this._state[2], this._state[3]];\n  }\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state) {\n    this._state[0] = state[0];\n    this._state[1] = state[1];\n    this._state[2] = state[2];\n    this._state[3] = state[3] | 1;\n  }\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max) {\n    if (!max) {\n      return this._next();\n    }\n    max = max >>> 0;\n    if ((max & max - 1) === 0) {\n      return this._next() & max - 1; // fast path for power of 2\n    }\n    let num = 0;\n    const skew = (-max >>> 0) % max >>> 0;\n    for (num = this._next(); num < skew; num = this._next()) {\n      // this loop will rarely execute more than twice,\n      // and is intentionally empty\n    }\n    return num % max;\n  }\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0;\n    const lo = (this._next() & 0x07ffffff) * 1.0;\n    return (hi * BIT_27 + lo) / BIT_53;\n  }\n  /** @internal */\n  _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0] >>> 0;\n    const oldLo = this._state[1] >>> 0;\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);\n    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18;\n    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;\n    xsHi = (xsHi ^ oldHi) >>> 0;\n    xsLo = (xsLo ^ oldLo) >>> 0;\n    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27;\n    const rot2 = (-rot >>> 0 & 31) >>> 0;\n    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;\n  }\n}\nfunction mul64(out, aHi, aLo, bHi, bLo) {\n  let c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;\n  let c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;\n  let lo = (aLo & 0xffff) * (bLo & 0xffff) >>> 0;\n  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;\n  c0 = c0 << 16 >>> 0;\n  lo = lo + c0 >>> 0;\n  if (lo >>> 0 < c0 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  c1 = c1 << 16 >>> 0;\n  lo = lo + c1 >>> 0;\n  if (lo >>> 0 < c1 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  hi = hi + Math.imul(aLo, bHi) >>> 0;\n  hi = hi + Math.imul(aHi, bLo) >>> 0;\n  out[0] = hi;\n  out[1] = lo;\n}\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(out, aHi, aLo, bHi, bLo) {\n  let hi = aHi + bHi >>> 0;\n  const lo = aLo + bLo >>> 0;\n  if (lo >>> 0 < aLo >>> 0) {\n    hi = hi + 1 | 0;\n  }\n  out[0] = hi;\n  out[1] = lo;\n}\n/**\n * @since 3.0.6\n */\nconst YieldWrapTypeId = /*#__PURE__*/Symbol.for(\"effect/Utils/YieldWrap\");\n/**\n * @since 3.0.6\n */\nclass YieldWrap {\n  /**\n   * @since 3.0.6\n   */\n  #value;\n  constructor(value) {\n    this.#value = value;\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId]() {\n    return this.#value;\n  }\n}\n/**\n * @since 3.0.6\n */\nfunction yieldWrapGet(self) {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]();\n  }\n  throw new Error((0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_2__.getBugErrorMessage)(\"yieldWrapGet\"));\n}\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nconst structuralRegionState = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__.globalValue)(\"effect/Utils/isStructuralRegion\", () => ({\n  enabled: false,\n  tester: undefined\n}));\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nconst structuralRegion = (body, tester) => {\n  const current = structuralRegionState.enabled;\n  const currentTester = structuralRegionState.tester;\n  structuralRegionState.enabled = true;\n  if (tester) {\n    structuralRegionState.tester = tester;\n  }\n  try {\n    return body();\n  } finally {\n    structuralRegionState.enabled = current;\n    structuralRegionState.tester = currentTester;\n  }\n};\nconst tracingFunction = name => {\n  const wrap = {\n    [name](body) {\n      return body();\n    }\n  };\n  return function (fn) {\n    return wrap[name](fn);\n  };\n};\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nconst internalCall = /*#__PURE__*/tracingFunction(\"effect_internal_function\");\n//# sourceMappingURL=Utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/context.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/context.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextProto: () => (/* binding */ ContextProto),\n/* harmony export */   STMTypeId: () => (/* binding */ STMTypeId),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   TagProto: () => (/* binding */ TagProto),\n/* harmony export */   TagTypeId: () => (/* binding */ TagTypeId),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeContext: () => (/* binding */ makeContext),\n/* harmony export */   makeGenericTag: () => (/* binding */ makeGenericTag),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n\n\n\n\n\n\n\n\n/** @internal */\nconst TagTypeId = /*#__PURE__*/Symbol.for(\"effect/Context/Tag\");\n/** @internal */\nconst STMSymbolKey = \"effect/STM\";\n/** @internal */\nconst STMTypeId = /*#__PURE__*/Symbol.for(STMSymbolKey);\n/** @internal */\nconst TagProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  _tag: \"Tag\",\n  _op: \"Tag\",\n  [STMTypeId]: _effectable_js__WEBPACK_IMPORTED_MODULE_0__.effectVariance,\n  [TagTypeId]: {\n    _Service: _ => _,\n    _Identifier: _ => _\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    };\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  of(self) {\n    return self;\n  },\n  context(self) {\n    return make(this, self);\n  }\n};\n/** @internal */\nconst makeGenericTag = key => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  const tag = Object.create(TagProto);\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  tag.key = key;\n  return tag;\n};\n/** @internal */\nconst Tag = id => () => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto);\n  TagClass.key = id;\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  return TagClass;\n};\n/** @internal */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Context\");\n/** @internal */\nconst ContextProto = {\n  [TypeId]: {\n    _Services: _ => _\n  },\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !_Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.number(this.unsafeMap.size));\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)\n    };\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n};\n/** @internal */\nconst makeContext = unsafeMap => {\n  const context = Object.create(ContextProto);\n  context.unsafeMap = unsafeMap;\n  return context;\n};\nconst serviceNotFoundError = tag => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`);\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\");\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/);\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`;\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\");\n    lines.splice(1, 3);\n    error.stack = lines.join(\"\\n\");\n  }\n  return error;\n};\n/** @internal */\nconst isContext = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TypeId);\n/** @internal */\nconst isTag = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TagTypeId);\nconst _empty = /*#__PURE__*/makeContext( /*#__PURE__*/new Map());\n/** @internal */\nconst empty = () => _empty;\n/** @internal */\nconst make = (tag, service) => makeContext(new Map([[tag.key, service]]));\n/** @internal */\nconst add = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap);\n  map.set(tag.key, service);\n  return makeContext(map);\n});\n/** @internal */\nconst unsafeGet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    throw serviceNotFoundError(tag);\n  }\n  return self.unsafeMap.get(tag.key);\n});\n/** @internal */\nconst get = unsafeGet;\n/** @internal */\nconst getOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(3, (self, tag, orElse) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return orElse();\n  }\n  return self.unsafeMap.get(tag.key);\n});\n/** @internal */\nconst getOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return _option_js__WEBPACK_IMPORTED_MODULE_7__.none;\n  }\n  return _option_js__WEBPACK_IMPORTED_MODULE_7__.some(self.unsafeMap.get(tag.key));\n});\n/** @internal */\nconst merge = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, that) => {\n  const map = new Map(self.unsafeMap);\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s);\n  }\n  return makeContext(map);\n});\n/** @internal */\nconst pick = (...tags) => self => {\n  const tagSet = new Set(tags.map(_ => _.key));\n  const newEnv = new Map();\n  for (const [tag, s] of self.unsafeMap.entries()) {\n    if (tagSet.has(tag)) {\n      newEnv.set(tag, s);\n    }\n  }\n  return makeContext(newEnv);\n};\n/** @internal */\nconst omit = (...tags) => self => {\n  const newEnv = new Map(self.unsafeMap);\n  for (const tag of tags) {\n    newEnv.delete(tag.key);\n  }\n  return makeContext(newEnv);\n};\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNDO0FBQ0g7QUFDbUM7QUFDdkI7QUFDRDtBQUNvQjtBQUM1QjtBQUN0QztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1AsS0FBSywyREFBZTtBQUNwQjtBQUNBO0FBQ0EsZUFBZSwwREFBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxXQUFXLHVEQUFNO0FBQ2pCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsR0FBRyw4REFBaUI7QUFDcEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHLDZDQUFZO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDZDQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUcsNENBQVc7QUFDZCxXQUFXLDRDQUFXLE9BQU8sNENBQVc7QUFDeEMsR0FBRztBQUNIO0FBQ0EsV0FBVywyREFBYTtBQUN4QixHQUFHO0FBQ0g7QUFDQSxXQUFXLHVEQUFNO0FBQ2pCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsbURBQU07QUFDckQ7QUFDQSxHQUFHO0FBQ0gsR0FBRyw4REFBaUI7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsZUFBZSxnQkFBZ0IsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFdBQVc7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHVCQUF1QiwwREFBVztBQUN6QztBQUNPLG1CQUFtQiwwREFBVztBQUNyQztBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTyx5QkFBeUIsa0RBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ08sK0JBQStCLGtEQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUDtBQUNPLCtCQUErQixrREFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPLCtCQUErQixrREFBSTtBQUMxQztBQUNBLFdBQVcsNENBQVc7QUFDdEI7QUFDQSxTQUFTLDRDQUFXO0FBQ3BCLENBQUM7QUFDRDtBQUNPLDJCQUEyQixrREFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvY29udGV4dC5qcz80YjI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVxdWFsIGZyb20gXCIuLi9FcXVhbC5qc1wiO1xuaW1wb3J0IHsgZHVhbCB9IGZyb20gXCIuLi9GdW5jdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgSGFzaCBmcm9tIFwiLi4vSGFzaC5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0LCBOb2RlSW5zcGVjdFN5bWJvbCwgdG9KU09OIH0gZnJvbSBcIi4uL0luc3BlY3RhYmxlLmpzXCI7XG5pbXBvcnQgeyBwaXBlQXJndW1lbnRzIH0gZnJvbSBcIi4uL1BpcGVhYmxlLmpzXCI7XG5pbXBvcnQgeyBoYXNQcm9wZXJ0eSB9IGZyb20gXCIuLi9QcmVkaWNhdGUuanNcIjtcbmltcG9ydCB7IEVmZmVjdFByb3RvdHlwZSwgZWZmZWN0VmFyaWFuY2UgfSBmcm9tIFwiLi9lZmZlY3RhYmxlLmpzXCI7XG5pbXBvcnQgKiBhcyBvcHRpb24gZnJvbSBcIi4vb3B0aW9uLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgVGFnVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvQ29udGV4dC9UYWdcIik7XG4vKiogQGludGVybmFsICovXG5jb25zdCBTVE1TeW1ib2xLZXkgPSBcImVmZmVjdC9TVE1cIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTVE1UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihTVE1TeW1ib2xLZXkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFRhZ1Byb3RvID0ge1xuICAuLi5FZmZlY3RQcm90b3R5cGUsXG4gIF90YWc6IFwiVGFnXCIsXG4gIF9vcDogXCJUYWdcIixcbiAgW1NUTVR5cGVJZF06IGVmZmVjdFZhcmlhbmNlLFxuICBbVGFnVHlwZUlkXToge1xuICAgIF9TZXJ2aWNlOiBfID0+IF8sXG4gICAgX0lkZW50aWZpZXI6IF8gPT4gX1xuICB9LFxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZm9ybWF0KHRoaXMudG9KU09OKCkpO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJUYWdcIixcbiAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICBzdGFjazogdGhpcy5zdGFja1xuICAgIH07XG4gIH0sXG4gIFtOb2RlSW5zcGVjdFN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH0sXG4gIG9mKHNlbGYpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgY29udGV4dChzZWxmKSB7XG4gICAgcmV0dXJuIG1ha2UodGhpcywgc2VsZik7XG4gIH1cbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbWFrZUdlbmVyaWNUYWcgPSBrZXkgPT4ge1xuICBjb25zdCBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMjtcbiAgY29uc3QgY3JlYXRpb25FcnJvciA9IG5ldyBFcnJvcigpO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdDtcbiAgY29uc3QgdGFnID0gT2JqZWN0LmNyZWF0ZShUYWdQcm90byk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsIFwic3RhY2tcIiwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBjcmVhdGlvbkVycm9yLnN0YWNrO1xuICAgIH1cbiAgfSk7XG4gIHRhZy5rZXkgPSBrZXk7XG4gIHJldHVybiB0YWc7XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFRhZyA9IGlkID0+ICgpID0+IHtcbiAgY29uc3QgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDI7XG4gIGNvbnN0IGNyZWF0aW9uRXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXQ7XG4gIGZ1bmN0aW9uIFRhZ0NsYXNzKCkge31cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFRhZ0NsYXNzLCBUYWdQcm90byk7XG4gIFRhZ0NsYXNzLmtleSA9IGlkO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGFnQ2xhc3MsIFwic3RhY2tcIiwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBjcmVhdGlvbkVycm9yLnN0YWNrO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBUYWdDbGFzcztcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvQ29udGV4dFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBDb250ZXh0UHJvdG8gPSB7XG4gIFtUeXBlSWRdOiB7XG4gICAgX1NlcnZpY2VzOiBfID0+IF9cbiAgfSxcbiAgW0VxdWFsLnN5bWJvbF0odGhhdCkge1xuICAgIGlmIChpc0NvbnRleHQodGhhdCkpIHtcbiAgICAgIGlmICh0aGlzLnVuc2FmZU1hcC5zaXplID09PSB0aGF0LnVuc2FmZU1hcC5zaXplKSB7XG4gICAgICAgIGZvciAoY29uc3QgayBvZiB0aGlzLnVuc2FmZU1hcC5rZXlzKCkpIHtcbiAgICAgICAgICBpZiAoIXRoYXQudW5zYWZlTWFwLmhhcyhrKSB8fCAhRXF1YWwuZXF1YWxzKHRoaXMudW5zYWZlTWFwLmdldChrKSwgdGhhdC51bnNhZmVNYXAuZ2V0KGspKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBbSGFzaC5zeW1ib2xdKCkge1xuICAgIHJldHVybiBIYXNoLmNhY2hlZCh0aGlzLCBIYXNoLm51bWJlcih0aGlzLnVuc2FmZU1hcC5zaXplKSk7XG4gIH0sXG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfSxcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6IFwiQ29udGV4dFwiLFxuICAgICAgc2VydmljZXM6IEFycmF5LmZyb20odGhpcy51bnNhZmVNYXApLm1hcCh0b0pTT04pXG4gICAgfTtcbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtYWtlQ29udGV4dCA9IHVuc2FmZU1hcCA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKENvbnRleHRQcm90byk7XG4gIGNvbnRleHQudW5zYWZlTWFwID0gdW5zYWZlTWFwO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5jb25zdCBzZXJ2aWNlTm90Rm91bmRFcnJvciA9IHRhZyA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBTZXJ2aWNlIG5vdCBmb3VuZCR7dGFnLmtleSA/IGA6ICR7U3RyaW5nKHRhZy5rZXkpfWAgOiBcIlwifWApO1xuICBpZiAodGFnLnN0YWNrKSB7XG4gICAgY29uc3QgbGluZXMgPSB0YWcuc3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGNvbnN0IGFmdGVyQXQgPSBsaW5lc1syXS5tYXRjaCgvYXQgKC4qKS8pO1xuICAgICAgaWYgKGFmdGVyQXQpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgKyBgIChkZWZpbmVkIGF0ICR7YWZ0ZXJBdFsxXX0pYDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgY29uc3QgbGluZXMgPSBlcnJvci5zdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICBsaW5lcy5zcGxpY2UoMSwgMyk7XG4gICAgZXJyb3Iuc3RhY2sgPSBsaW5lcy5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBlcnJvcjtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNDb250ZXh0ID0gdSA9PiBoYXNQcm9wZXJ0eSh1LCBUeXBlSWQpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzVGFnID0gdSA9PiBoYXNQcm9wZXJ0eSh1LCBUYWdUeXBlSWQpO1xuY29uc3QgX2VtcHR5ID0gLyojX19QVVJFX18qL21ha2VDb250ZXh0KCAvKiNfX1BVUkVfXyovbmV3IE1hcCgpKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBlbXB0eSA9ICgpID0+IF9lbXB0eTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtYWtlID0gKHRhZywgc2VydmljZSkgPT4gbWFrZUNvbnRleHQobmV3IE1hcChbW3RhZy5rZXksIHNlcnZpY2VdXSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IC8qI19fUFVSRV9fKi9kdWFsKDMsIChzZWxmLCB0YWcsIHNlcnZpY2UpID0+IHtcbiAgY29uc3QgbWFwID0gbmV3IE1hcChzZWxmLnVuc2FmZU1hcCk7XG4gIG1hcC5zZXQodGFnLmtleSwgc2VydmljZSk7XG4gIHJldHVybiBtYWtlQ29udGV4dChtYXApO1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgdW5zYWZlR2V0ID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRhZykgPT4ge1xuICBpZiAoIXNlbGYudW5zYWZlTWFwLmhhcyh0YWcua2V5KSkge1xuICAgIHRocm93IHNlcnZpY2VOb3RGb3VuZEVycm9yKHRhZyk7XG4gIH1cbiAgcmV0dXJuIHNlbGYudW5zYWZlTWFwLmdldCh0YWcua2V5KTtcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldCA9IHVuc2FmZUdldDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRPckVsc2UgPSAvKiNfX1BVUkVfXyovZHVhbCgzLCAoc2VsZiwgdGFnLCBvckVsc2UpID0+IHtcbiAgaWYgKCFzZWxmLnVuc2FmZU1hcC5oYXModGFnLmtleSkpIHtcbiAgICByZXR1cm4gb3JFbHNlKCk7XG4gIH1cbiAgcmV0dXJuIHNlbGYudW5zYWZlTWFwLmdldCh0YWcua2V5KTtcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldE9wdGlvbiA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCB0YWcpID0+IHtcbiAgaWYgKCFzZWxmLnVuc2FmZU1hcC5oYXModGFnLmtleSkpIHtcbiAgICByZXR1cm4gb3B0aW9uLm5vbmU7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbi5zb21lKHNlbGYudW5zYWZlTWFwLmdldCh0YWcua2V5KSk7XG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtZXJnZSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCB0aGF0KSA9PiB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAoc2VsZi51bnNhZmVNYXApO1xuICBmb3IgKGNvbnN0IFt0YWcsIHNdIG9mIHRoYXQudW5zYWZlTWFwKSB7XG4gICAgbWFwLnNldCh0YWcsIHMpO1xuICB9XG4gIHJldHVybiBtYWtlQ29udGV4dChtYXApO1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgcGljayA9ICguLi50YWdzKSA9PiBzZWxmID0+IHtcbiAgY29uc3QgdGFnU2V0ID0gbmV3IFNldCh0YWdzLm1hcChfID0+IF8ua2V5KSk7XG4gIGNvbnN0IG5ld0VudiA9IG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBbdGFnLCBzXSBvZiBzZWxmLnVuc2FmZU1hcC5lbnRyaWVzKCkpIHtcbiAgICBpZiAodGFnU2V0Lmhhcyh0YWcpKSB7XG4gICAgICBuZXdFbnYuc2V0KHRhZywgcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYWtlQ29udGV4dChuZXdFbnYpO1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBvbWl0ID0gKC4uLnRhZ3MpID0+IHNlbGYgPT4ge1xuICBjb25zdCBuZXdFbnYgPSBuZXcgTWFwKHNlbGYudW5zYWZlTWFwKTtcbiAgZm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuICAgIG5ld0Vudi5kZWxldGUodGFnLmtleSk7XG4gIH1cbiAgcmV0dXJuIG1ha2VDb250ZXh0KG5ld0Vudik7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/doNotation.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   let_: () => (/* binding */ let_)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n\n/** @internal */\nconst let_ = map => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f) => map(self, a => Object.assign({}, a, {\n  [name]: f(a)\n})));\n/** @internal */\nconst bindTo = map => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, name) => map(self, a => ({\n  [name]: a\n})));\n/** @internal */\nconst bind = (map, flatMap) => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f) => flatMap(self, a => map(f(a), b => Object.assign({}, a, {\n  [name]: b\n}))));\n//# sourceMappingURL=doNotation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2RvTm90YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzQztBQUN0QztBQUNPLG9CQUFvQixrREFBSSxzREFBc0Q7QUFDckY7QUFDQSxDQUFDO0FBQ0Q7QUFDTyxzQkFBc0Isa0RBQUk7QUFDakM7QUFDQSxDQUFDO0FBQ0Q7QUFDTywrQkFBK0Isa0RBQUkseUVBQXlFO0FBQ25IO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZS1sZWFybmluZy13ZWJhcHBsaWNhdGlvbi1sbXMvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2RvTm90YXRpb24uanM/ZDMwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbGV0XyA9IG1hcCA9PiBkdWFsKDMsIChzZWxmLCBuYW1lLCBmKSA9PiBtYXAoc2VsZiwgYSA9PiBPYmplY3QuYXNzaWduKHt9LCBhLCB7XG4gIFtuYW1lXTogZihhKVxufSkpKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBiaW5kVG8gPSBtYXAgPT4gZHVhbCgyLCAoc2VsZiwgbmFtZSkgPT4gbWFwKHNlbGYsIGEgPT4gKHtcbiAgW25hbWVdOiBhXG59KSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGJpbmQgPSAobWFwLCBmbGF0TWFwKSA9PiBkdWFsKDMsIChzZWxmLCBuYW1lLCBmKSA9PiBmbGF0TWFwKHNlbGYsIGEgPT4gbWFwKGYoYSksIGIgPT4gT2JqZWN0LmFzc2lnbih7fSwgYSwge1xuICBbbmFtZV06IGJcbn0pKSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9Ob3RhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/effectable.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/effectable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base: () => (/* binding */ Base),\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralBase: () => (/* binding */ StructuralBase),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype),\n/* harmony export */   StructuralPrototype: () => (/* binding */ StructuralPrototype),\n/* harmony export */   effectVariance: () => (/* binding */ effectVariance)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/* harmony import */ var _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./opCodes/effect.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n\n\n\n\n\n\n/** @internal */\nconst EffectTypeId = /*#__PURE__*/Symbol.for(\"effect/Effect\");\n/** @internal */\nconst StreamTypeId = /*#__PURE__*/Symbol.for(\"effect/Stream\");\n/** @internal */\nconst SinkTypeId = /*#__PURE__*/Symbol.for(\"effect/Sink\");\n/** @internal */\nconst ChannelTypeId = /*#__PURE__*/Symbol.for(\"effect/Channel\");\n/** @internal */\nconst effectVariance = {\n  /* c8 ignore next */\n  _R: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _A: _ => _,\n  _V: /*#__PURE__*/_version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()\n};\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: _ => _,\n  /* c8 ignore next */\n  _In: _ => _,\n  /* c8 ignore next */\n  _L: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _R: _ => _\n};\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: _ => _,\n  /* c8 ignore next */\n  _InErr: _ => _,\n  /* c8 ignore next */\n  _InElem: _ => _,\n  /* c8 ignore next */\n  _InDone: _ => _,\n  /* c8 ignore next */\n  _OutErr: _ => _,\n  /* c8 ignore next */\n  _OutElem: _ => _,\n  /* c8 ignore next */\n  _OutDone: _ => _\n};\n/** @internal */\nconst EffectPrototype = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol](that) {\n    return this === that;\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.random(this));\n  },\n  [Symbol.iterator]() {\n    return new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.YieldWrap(this));\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  }\n};\n/** @internal */\nconst StructuralPrototype = {\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.structure(this));\n  },\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol](that) {\n    const selfKeys = Object.keys(this);\n    const thatKeys = Object.keys(that);\n    if (selfKeys.length !== thatKeys.length) {\n      return false;\n    }\n    for (const key of selfKeys) {\n      if (!(key in that && _Equal_js__WEBPACK_IMPORTED_MODULE_1__.equals(this[key], that[key]))) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n/** @internal */\nconst CommitPrototype = {\n  ...EffectPrototype,\n  _op: _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__.OP_COMMIT\n};\n/** @internal */\nconst StructuralCommitPrototype = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n};\n/** @internal */\nconst Base = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = CommitPrototype;\n  return Base;\n}();\n/** @internal */\nconst StructuralBase = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype;\n  return Base;\n}();\n//# sourceMappingURL=effectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDRjtBQUNZO0FBQ1E7QUFDUjtBQUNQO0FBQ3hDO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBEQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmO0FBQ0EsR0FBRztBQUNILEdBQUcsNENBQVc7QUFDZCxXQUFXLDRDQUFXLE9BQU8sNENBQVc7QUFDeEMsR0FBRztBQUNIO0FBQ0EsZUFBZSxvREFBYSxLQUFLLGdEQUFTO0FBQzFDLEdBQUc7QUFDSDtBQUNBLFdBQVcsMkRBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ087QUFDUCxHQUFHLDRDQUFXO0FBQ2QsV0FBVyw0Q0FBVyxPQUFPLCtDQUFjO0FBQzNDLEdBQUc7QUFDSCxHQUFHLDZDQUFZO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDZDQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLE9BQU8seURBQWlCO0FBQ3hCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lZmZlY3RhYmxlLmpzPzRjOWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBwaXBlQXJndW1lbnRzIH0gZnJvbSBcIi4uL1BpcGVhYmxlLmpzXCI7XG5pbXBvcnQgeyBTaW5nbGVTaG90R2VuLCBZaWVsZFdyYXAgfSBmcm9tIFwiLi4vVXRpbHMuanNcIjtcbmltcG9ydCAqIGFzIE9wQ29kZXMgZnJvbSBcIi4vb3BDb2Rlcy9lZmZlY3QuanNcIjtcbmltcG9ydCAqIGFzIHZlcnNpb24gZnJvbSBcIi4vdmVyc2lvbi5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VmZmVjdFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJlYW1UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9TdHJlYW1cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgU2lua1R5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L1NpbmtcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgQ2hhbm5lbFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0NoYW5uZWxcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZWZmZWN0VmFyaWFuY2UgPSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9SOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9FOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9BOiBfID0+IF8sXG4gIF9WOiAvKiNfX1BVUkVfXyovdmVyc2lvbi5nZXRDdXJyZW50VmVyc2lvbigpXG59O1xuY29uc3Qgc2lua1ZhcmlhbmNlID0ge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfQTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW46IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0w6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0U6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX1I6IF8gPT4gX1xufTtcbmNvbnN0IGNoYW5uZWxWYXJpYW5jZSA9IHtcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0VudjogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW5FcnI6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0luRWxlbTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW5Eb25lOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9PdXRFcnI6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX091dEVsZW06IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX091dERvbmU6IF8gPT4gX1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFZmZlY3RQcm90b3R5cGUgPSB7XG4gIFtFZmZlY3RUeXBlSWRdOiBlZmZlY3RWYXJpYW5jZSxcbiAgW1N0cmVhbVR5cGVJZF06IGVmZmVjdFZhcmlhbmNlLFxuICBbU2lua1R5cGVJZF06IHNpbmtWYXJpYW5jZSxcbiAgW0NoYW5uZWxUeXBlSWRdOiBjaGFubmVsVmFyaWFuY2UsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gdGhhdDtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5yYW5kb20odGhpcykpO1xuICB9LFxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gbmV3IFNpbmdsZVNob3RHZW4obmV3IFlpZWxkV3JhcCh0aGlzKSk7XG4gIH0sXG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsUHJvdG90eXBlID0ge1xuICBbSGFzaC5zeW1ib2xdKCkge1xuICAgIHJldHVybiBIYXNoLmNhY2hlZCh0aGlzLCBIYXNoLnN0cnVjdHVyZSh0aGlzKSk7XG4gIH0sXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICBjb25zdCBzZWxmS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGNvbnN0IHRoYXRLZXlzID0gT2JqZWN0LmtleXModGhhdCk7XG4gICAgaWYgKHNlbGZLZXlzLmxlbmd0aCAhPT0gdGhhdEtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlbGZLZXlzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gdGhhdCAmJiBFcXVhbC5lcXVhbHModGhpc1trZXldLCB0aGF0W2tleV0pKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IENvbW1pdFByb3RvdHlwZSA9IHtcbiAgLi4uRWZmZWN0UHJvdG90eXBlLFxuICBfb3A6IE9wQ29kZXMuT1BfQ09NTUlUXG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFN0cnVjdHVyYWxDb21taXRQcm90b3R5cGUgPSB7XG4gIC4uLkNvbW1pdFByb3RvdHlwZSxcbiAgLi4uU3RydWN0dXJhbFByb3RvdHlwZVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBCYXNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZSgpIHt9XG4gIEJhc2UucHJvdG90eXBlID0gQ29tbWl0UHJvdG90eXBlO1xuICByZXR1cm4gQmFzZTtcbn0oKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQmFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2UoKSB7fVxuICBCYXNlLnByb3RvdHlwZSA9IFN0cnVjdHVyYWxDb21taXRQcm90b3R5cGU7XG4gIHJldHVybiBCYXNlO1xufSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/either.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/either.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   right: () => (/* binding */ right)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\n\n\n/**\n * @internal\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Either\");\nconst CommonProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  [TypeId]: {\n    _R: _ => _\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  }\n};\nconst RightProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isEither(that) && isRight(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.right, that.right);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.right));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.right)\n    };\n  }\n});\nconst LeftProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isEither(that) && isLeft(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.left, that.left);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.left));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.left)\n    };\n  }\n});\n/** @internal */\nconst isEither = input => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */\nconst isLeft = ma => ma._tag === \"Left\";\n/** @internal */\nconst isRight = ma => ma._tag === \"Right\";\n/** @internal */\nconst left = left => {\n  const a = Object.create(LeftProto);\n  a.left = left;\n  return a;\n};\n/** @internal */\nconst right = right => {\n  const a = Object.create(RightProto);\n  a.right = right;\n  return a;\n};\n/** @internal */\nconst getLeft = self => isRight(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.left);\n/** @internal */\nconst getRight = self => isLeft(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.right);\n/** @internal */\nconst fromOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, onNone) => _option_js__WEBPACK_IMPORTED_MODULE_5__.isNone(self) ? left(onNone()) : right(self.value));\n//# sourceMappingURL=either.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VpdGhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3FDO0FBQ0M7QUFDSDtBQUNtQztBQUN4QjtBQUNJO0FBQ1o7QUFDdEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLEtBQUssMkRBQWU7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHLDhEQUFpQjtBQUNwQjtBQUNBLEdBQUc7QUFDSDtBQUNBLFdBQVcsdURBQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsNkNBQVk7QUFDZiw4Q0FBOEMsNkNBQVk7QUFDMUQsR0FBRztBQUNILEdBQUcsNENBQVc7QUFDZCxXQUFXLDZDQUFZLENBQUMsMENBQVMsYUFBYSwwQ0FBUztBQUN2RCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVEQUFNO0FBQ25CO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmLDZDQUE2Qyw2Q0FBWTtBQUN6RCxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkLFdBQVcsNkNBQVksQ0FBQywwQ0FBUyxhQUFhLDBDQUFTO0FBQ3ZELEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQU07QUFDbEI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPLDBCQUEwQiwwREFBVztBQUM1QztBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0NBQXdDLDRDQUFXLEdBQUcsNENBQVc7QUFDeEU7QUFDTyx3Q0FBd0MsNENBQVcsR0FBRyw0Q0FBVztBQUN4RTtBQUNPLGdDQUFnQyxrREFBSSxzQkFBc0IsOENBQWE7QUFDOUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZWl0aGVyLmpzP2JlMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXQsIE5vZGVJbnNwZWN0U3ltYm9sLCB0b0pTT04gfSBmcm9tIFwiLi4vSW5zcGVjdGFibGUuanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgRWZmZWN0UHJvdG90eXBlIH0gZnJvbSBcIi4vZWZmZWN0YWJsZS5qc1wiO1xuaW1wb3J0ICogYXMgb3B0aW9uIGZyb20gXCIuL29wdGlvbi5qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VpdGhlclwiKTtcbmNvbnN0IENvbW1vblByb3RvID0ge1xuICAuLi5FZmZlY3RQcm90b3R5cGUsXG4gIFtUeXBlSWRdOiB7XG4gICAgX1I6IF8gPT4gX1xuICB9LFxuICBbTm9kZUluc3BlY3RTeW1ib2xdKCkge1xuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICB9LFxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZm9ybWF0KHRoaXMudG9KU09OKCkpO1xuICB9XG59O1xuY29uc3QgUmlnaHRQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJSaWdodFwiLFxuICBfb3A6IFwiUmlnaHRcIixcbiAgW0VxdWFsLnN5bWJvbF0odGhhdCkge1xuICAgIHJldHVybiBpc0VpdGhlcih0aGF0KSAmJiBpc1JpZ2h0KHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLnJpZ2h0LCB0aGF0LnJpZ2h0KTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jb21iaW5lKEhhc2guaGFzaCh0aGlzLl90YWcpKShIYXNoLmhhc2godGhpcy5yaWdodCkpO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJFaXRoZXJcIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZyxcbiAgICAgIHJpZ2h0OiB0b0pTT04odGhpcy5yaWdodClcbiAgICB9O1xuICB9XG59KTtcbmNvbnN0IExlZnRQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJMZWZ0XCIsXG4gIF9vcDogXCJMZWZ0XCIsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNFaXRoZXIodGhhdCkgJiYgaXNMZWZ0KHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLmxlZnQsIHRoYXQubGVmdCk7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIEhhc2guY29tYmluZShIYXNoLmhhc2godGhpcy5fdGFnKSkoSGFzaC5oYXNoKHRoaXMubGVmdCkpO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJFaXRoZXJcIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZyxcbiAgICAgIGxlZnQ6IHRvSlNPTih0aGlzLmxlZnQpXG4gICAgfTtcbiAgfVxufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNFaXRoZXIgPSBpbnB1dCA9PiBoYXNQcm9wZXJ0eShpbnB1dCwgVHlwZUlkKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0xlZnQgPSBtYSA9PiBtYS5fdGFnID09PSBcIkxlZnRcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc1JpZ2h0ID0gbWEgPT4gbWEuX3RhZyA9PT0gXCJSaWdodFwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGxlZnQgPSBsZWZ0ID0+IHtcbiAgY29uc3QgYSA9IE9iamVjdC5jcmVhdGUoTGVmdFByb3RvKTtcbiAgYS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGE7XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHJpZ2h0ID0gcmlnaHQgPT4ge1xuICBjb25zdCBhID0gT2JqZWN0LmNyZWF0ZShSaWdodFByb3RvKTtcbiAgYS5yaWdodCA9IHJpZ2h0O1xuICByZXR1cm4gYTtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0TGVmdCA9IHNlbGYgPT4gaXNSaWdodChzZWxmKSA/IG9wdGlvbi5ub25lIDogb3B0aW9uLnNvbWUoc2VsZi5sZWZ0KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRSaWdodCA9IHNlbGYgPT4gaXNMZWZ0KHNlbGYpID8gb3B0aW9uLm5vbmUgOiBvcHRpb24uc29tZShzZWxmLnJpZ2h0KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBmcm9tT3B0aW9uID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIG9uTm9uZSkgPT4gb3B0aW9uLmlzTm9uZShzZWxmKSA/IGxlZnQob25Ob25lKCkpIDogcmlnaHQoc2VsZi52YWx1ZSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWl0aGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js":
/*!******************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/base64.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n/** @internal */\nconst encode = bytes => {\n  const length = bytes.length;\n  let result = \"\";\n  let i;\n  for (i = 2; i < length; i += 3) {\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0f) << 2 | bytes[i] >> 6];\n    result += base64abc[bytes[i] & 0x3f];\n  }\n  if (i === length + 1) {\n    // 1 octet yet to write\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4];\n    result += \"==\";\n  }\n  if (i === length) {\n    // 2 octets yet to write\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n    result += \"=\";\n  }\n  return result;\n};\n/** @internal */\nconst decode = str => {\n  const length = str.length;\n  if (length % 4 !== 0) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, `Length must be a multiple of 4, but is ${length}`));\n  }\n  const index = str.indexOf(\"=\");\n  if (index !== -1 && (index < length - 2 || index === length - 2 && str[length - 1] !== \"=\")) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, \"Found a '=' character, but it is not at the end\"));\n  }\n  try {\n    const missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0;\n    const result = new Uint8Array(3 * (length / 4));\n    for (let i = 0, j = 0; i < length; i += 4, j += 3) {\n      const buffer = getBase64Code(str.charCodeAt(i)) << 18 | getBase64Code(str.charCodeAt(i + 1)) << 12 | getBase64Code(str.charCodeAt(i + 2)) << 6 | getBase64Code(str.charCodeAt(i + 3));\n      result[j] = buffer >> 16;\n      result[j + 1] = buffer >> 8 & 0xff;\n      result[j + 2] = buffer & 0xff;\n    }\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.right(result.subarray(0, result.length - missingOctets));\n  } catch (e) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, e instanceof Error ? e.message : \"Invalid input\"));\n  }\n};\n/** @internal */\nfunction getBase64Code(charCode) {\n  if (charCode >= base64codes.length) {\n    throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);\n  }\n  const code = base64codes[charCode];\n  if (code === 255) {\n    throw new TypeError(`Invalid character ${String.fromCharCode(charCode)}`);\n  }\n  return code;\n}\n/** @internal */\nconst base64abc = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"+\", \"/\"];\n/** @internal */\nconst base64codes = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0k7QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxXQUFXLDRDQUFXLENBQUMsMkRBQWUsZ0RBQWdELE9BQU87QUFDN0Y7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0Q0FBVyxDQUFDLDJEQUFlO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFlBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkNBQVk7QUFDdkIsSUFBSTtBQUNKLFdBQVcsNENBQVcsQ0FBQywyREFBZTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDhCQUE4QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsOEJBQThCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZW5jb2RpbmcvYmFzZTY0LmpzP2QxYjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRWl0aGVyIGZyb20gXCIuLi8uLi9FaXRoZXIuanNcIjtcbmltcG9ydCB7IERlY29kZUV4Y2VwdGlvbiB9IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IGJ5dGVzID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDI7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuICAgIHJlc3VsdCArPSBiYXNlNjRhYmNbYnl0ZXNbaSAtIDJdID4+IDJdO1xuICAgIHJlc3VsdCArPSBiYXNlNjRhYmNbKGJ5dGVzW2kgLSAyXSAmIDB4MDMpIDw8IDQgfCBieXRlc1tpIC0gMV0gPj4gNF07XG4gICAgcmVzdWx0ICs9IGJhc2U2NGFiY1soYnl0ZXNbaSAtIDFdICYgMHgwZikgPDwgMiB8IGJ5dGVzW2ldID4+IDZdO1xuICAgIHJlc3VsdCArPSBiYXNlNjRhYmNbYnl0ZXNbaV0gJiAweDNmXTtcbiAgfVxuICBpZiAoaSA9PT0gbGVuZ3RoICsgMSkge1xuICAgIC8vIDEgb2N0ZXQgeWV0IHRvIHdyaXRlXG4gICAgcmVzdWx0ICs9IGJhc2U2NGFiY1tieXRlc1tpIC0gMl0gPj4gMl07XG4gICAgcmVzdWx0ICs9IGJhc2U2NGFiY1soYnl0ZXNbaSAtIDJdICYgMHgwMykgPDwgNF07XG4gICAgcmVzdWx0ICs9IFwiPT1cIjtcbiAgfVxuICBpZiAoaSA9PT0gbGVuZ3RoKSB7XG4gICAgLy8gMiBvY3RldHMgeWV0IHRvIHdyaXRlXG4gICAgcmVzdWx0ICs9IGJhc2U2NGFiY1tieXRlc1tpIC0gMl0gPj4gMl07XG4gICAgcmVzdWx0ICs9IGJhc2U2NGFiY1soYnl0ZXNbaSAtIDJdICYgMHgwMykgPDwgNCB8IGJ5dGVzW2kgLSAxXSA+PiA0XTtcbiAgICByZXN1bHQgKz0gYmFzZTY0YWJjWyhieXRlc1tpIC0gMV0gJiAweDBmKSA8PCAyXTtcbiAgICByZXN1bHQgKz0gXCI9XCI7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZGVjb2RlID0gc3RyID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAlIDQgIT09IDApIHtcbiAgICByZXR1cm4gRWl0aGVyLmxlZnQoRGVjb2RlRXhjZXB0aW9uKHN0ciwgYExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCwgYnV0IGlzICR7bGVuZ3RofWApKTtcbiAgfVxuICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKFwiPVwiKTtcbiAgaWYgKGluZGV4ICE9PSAtMSAmJiAoaW5kZXggPCBsZW5ndGggLSAyIHx8IGluZGV4ID09PSBsZW5ndGggLSAyICYmIHN0cltsZW5ndGggLSAxXSAhPT0gXCI9XCIpKSB7XG4gICAgcmV0dXJuIEVpdGhlci5sZWZ0KERlY29kZUV4Y2VwdGlvbihzdHIsIFwiRm91bmQgYSAnPScgY2hhcmFjdGVyLCBidXQgaXQgaXMgbm90IGF0IHRoZSBlbmRcIikpO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgbWlzc2luZ09jdGV0cyA9IHN0ci5lbmRzV2l0aChcIj09XCIpID8gMiA6IHN0ci5lbmRzV2l0aChcIj1cIikgPyAxIDogMDtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheSgzICogKGxlbmd0aCAvIDQpKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBnZXRCYXNlNjRDb2RlKHN0ci5jaGFyQ29kZUF0KGkpKSA8PCAxOCB8IGdldEJhc2U2NENvZGUoc3RyLmNoYXJDb2RlQXQoaSArIDEpKSA8PCAxMiB8IGdldEJhc2U2NENvZGUoc3RyLmNoYXJDb2RlQXQoaSArIDIpKSA8PCA2IHwgZ2V0QmFzZTY0Q29kZShzdHIuY2hhckNvZGVBdChpICsgMykpO1xuICAgICAgcmVzdWx0W2pdID0gYnVmZmVyID4+IDE2O1xuICAgICAgcmVzdWx0W2ogKyAxXSA9IGJ1ZmZlciA+PiA4ICYgMHhmZjtcbiAgICAgIHJlc3VsdFtqICsgMl0gPSBidWZmZXIgJiAweGZmO1xuICAgIH1cbiAgICByZXR1cm4gRWl0aGVyLnJpZ2h0KHJlc3VsdC5zdWJhcnJheSgwLCByZXN1bHQubGVuZ3RoIC0gbWlzc2luZ09jdGV0cykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIEVpdGhlci5sZWZ0KERlY29kZUV4Y2VwdGlvbihzdHIsIGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFwiSW52YWxpZCBpbnB1dFwiKSk7XG4gIH1cbn07XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBnZXRCYXNlNjRDb2RlKGNoYXJDb2RlKSB7XG4gIGlmIChjaGFyQ29kZSA+PSBiYXNlNjRjb2Rlcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGNoYXJhY3RlciAke1N0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpfWApO1xuICB9XG4gIGNvbnN0IGNvZGUgPSBiYXNlNjRjb2Rlc1tjaGFyQ29kZV07XG4gIGlmIChjb2RlID09PSAyNTUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGNoYXJhY3RlciAke1N0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpfWApO1xuICB9XG4gIHJldHVybiBjb2RlO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgYmFzZTY0YWJjID0gW1wiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJJXCIsIFwiSlwiLCBcIktcIiwgXCJMXCIsIFwiTVwiLCBcIk5cIiwgXCJPXCIsIFwiUFwiLCBcIlFcIiwgXCJSXCIsIFwiU1wiLCBcIlRcIiwgXCJVXCIsIFwiVlwiLCBcIldcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIiwgXCJhXCIsIFwiYlwiLCBcImNcIiwgXCJkXCIsIFwiZVwiLCBcImZcIiwgXCJnXCIsIFwiaFwiLCBcImlcIiwgXCJqXCIsIFwia1wiLCBcImxcIiwgXCJtXCIsIFwiblwiLCBcIm9cIiwgXCJwXCIsIFwicVwiLCBcInJcIiwgXCJzXCIsIFwidFwiLCBcInVcIiwgXCJ2XCIsIFwid1wiLCBcInhcIiwgXCJ5XCIsIFwielwiLCBcIjBcIiwgXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIrXCIsIFwiL1wiXTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGJhc2U2NGNvZGVzID0gWzI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgNjIsIDI1NSwgMjU1LCAyNTUsIDYzLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgMjU1LCAyNTUsIDI1NSwgMCwgMjU1LCAyNTUsIDI1NSwgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MV07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js":
/*!*********************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/base64Url.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n\n/** @internal */\nconst encode = data => _base64_js__WEBPACK_IMPORTED_MODULE_0__.encode(data).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n/** @internal */\nconst decode = str => {\n  const length = str.length;\n  if (length % 4 === 1) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_1__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_2__.DecodeException)(str, `Length should be a multiple of 4, but is ${length}`));\n  }\n  if (!/^[-_A-Z0-9]*?={0,2}$/i.test(str)) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_1__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_2__.DecodeException)(str, \"Invalid input\"));\n  }\n  // Some variants allow or require omitting the padding '=' signs\n  let sanitized = length % 4 === 2 ? `${str}==` : length % 4 === 3 ? `${str}=` : str;\n  sanitized = sanitized.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decode(sanitized);\n};\n//# sourceMappingURL=base64Url.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NFVybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQztBQUNKO0FBQ1E7QUFDOUM7QUFDTyx1QkFBdUIsOENBQWE7QUFDM0M7QUFDTztBQUNQO0FBQ0E7QUFDQSxXQUFXLDRDQUFXLENBQUMsMkRBQWUsa0RBQWtELE9BQU87QUFDL0Y7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQixXQUFXLDRDQUFXLENBQUMsMkRBQWU7QUFDdEM7QUFDQTtBQUNBLHdDQUF3QyxJQUFJLDRCQUE0QixJQUFJO0FBQzVFO0FBQ0EsU0FBUyw4Q0FBYTtBQUN0QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZS1sZWFybmluZy13ZWJhcHBsaWNhdGlvbi1sbXMvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2Jhc2U2NFVybC5qcz81MTNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVpdGhlciBmcm9tIFwiLi4vLi4vRWl0aGVyLmpzXCI7XG5pbXBvcnQgKiBhcyBCYXNlNjQgZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG5pbXBvcnQgeyBEZWNvZGVFeGNlcHRpb24gfSBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBlbmNvZGUgPSBkYXRhID0+IEJhc2U2NC5lbmNvZGUoZGF0YSkucmVwbGFjZSgvPS9nLCBcIlwiKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZGVjb2RlID0gc3RyID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAlIDQgPT09IDEpIHtcbiAgICByZXR1cm4gRWl0aGVyLmxlZnQoRGVjb2RlRXhjZXB0aW9uKHN0ciwgYExlbmd0aCBzaG91bGQgYmUgYSBtdWx0aXBsZSBvZiA0LCBidXQgaXMgJHtsZW5ndGh9YCkpO1xuICB9XG4gIGlmICghL15bLV9BLVowLTldKj89ezAsMn0kL2kudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIEVpdGhlci5sZWZ0KERlY29kZUV4Y2VwdGlvbihzdHIsIFwiSW52YWxpZCBpbnB1dFwiKSk7XG4gIH1cbiAgLy8gU29tZSB2YXJpYW50cyBhbGxvdyBvciByZXF1aXJlIG9taXR0aW5nIHRoZSBwYWRkaW5nICc9JyBzaWduc1xuICBsZXQgc2FuaXRpemVkID0gbGVuZ3RoICUgNCA9PT0gMiA/IGAke3N0cn09PWAgOiBsZW5ndGggJSA0ID09PSAzID8gYCR7c3RyfT1gIDogc3RyO1xuICBzYW5pdGl6ZWQgPSBzYW5pdGl6ZWQucmVwbGFjZSgvLS9nLCBcIitcIikucmVwbGFjZSgvXy9nLCBcIi9cIik7XG4gIHJldHVybiBCYXNlNjQuZGVjb2RlKHNhbml0aXplZCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0VXJsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/base64Url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js":
/*!******************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/common.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeException: () => (/* binding */ DecodeException),\n/* harmony export */   DecodeExceptionTypeId: () => (/* binding */ DecodeExceptionTypeId),\n/* harmony export */   decoder: () => (/* binding */ decoder),\n/* harmony export */   encoder: () => (/* binding */ encoder),\n/* harmony export */   isDecodeException: () => (/* binding */ isDecodeException)\n/* harmony export */ });\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n\n/** @internal */\nconst DecodeExceptionTypeId = /*#__PURE__*/Symbol.for(\"effect/Encoding/errors/Decode\");\n/** @internal */\nconst DecodeException = (input, message) => {\n  const out = {\n    _tag: \"DecodeException\",\n    [DecodeExceptionTypeId]: DecodeExceptionTypeId,\n    input\n  };\n  if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isString)(message)) {\n    out.message = message;\n  }\n  return out;\n};\n/** @internal */\nconst isDecodeException = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(u, DecodeExceptionTypeId);\n/** @interal */\nconst encoder = /*#__PURE__*/new TextEncoder();\n/** @interal */\nconst decoder = /*#__PURE__*/new TextDecoder();\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkQ7QUFDM0Q7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx1REFBUTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0IsMERBQVc7QUFDakQ7QUFDTztBQUNQO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lbmNvZGluZy9jb21tb24uanM/MmZmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXNQcm9wZXJ0eSwgaXNTdHJpbmcgfSBmcm9tIFwiLi4vLi4vUHJlZGljYXRlLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgRGVjb2RlRXhjZXB0aW9uVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvRW5jb2RpbmcvZXJyb3JzL0RlY29kZVwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBEZWNvZGVFeGNlcHRpb24gPSAoaW5wdXQsIG1lc3NhZ2UpID0+IHtcbiAgY29uc3Qgb3V0ID0ge1xuICAgIF90YWc6IFwiRGVjb2RlRXhjZXB0aW9uXCIsXG4gICAgW0RlY29kZUV4Y2VwdGlvblR5cGVJZF06IERlY29kZUV4Y2VwdGlvblR5cGVJZCxcbiAgICBpbnB1dFxuICB9O1xuICBpZiAoaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICBvdXQubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNEZWNvZGVFeGNlcHRpb24gPSB1ID0+IGhhc1Byb3BlcnR5KHUsIERlY29kZUV4Y2VwdGlvblR5cGVJZCk7XG4vKiogQGludGVyYWwgKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVyID0gLyojX19QVVJFX18qL25ldyBUZXh0RW5jb2RlcigpO1xuLyoqIEBpbnRlcmFsICovXG5leHBvcnQgY29uc3QgZGVjb2RlciA9IC8qI19fUFVSRV9fKi9uZXcgVGV4dERlY29kZXIoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js":
/*!***************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/encoding/hex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/encoding/common.js\");\n\n\n/** @internal */\nconst encode = bytes => {\n  let result = \"\";\n  for (let i = 0; i < bytes.length; ++i) {\n    result += bytesToHex[bytes[i]];\n  }\n  return result;\n};\n/** @internal */\nconst decode = str => {\n  const bytes = new TextEncoder().encode(str);\n  if (bytes.length % 2 !== 0) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, `Length must be a multiple of 2, but is ${bytes.length}`));\n  }\n  try {\n    const length = bytes.length / 2;\n    const result = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      const a = fromHexChar(bytes[i * 2]);\n      const b = fromHexChar(bytes[i * 2 + 1]);\n      result[i] = a << 4 | b;\n    }\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.right(result);\n  } catch (e) {\n    return _Either_js__WEBPACK_IMPORTED_MODULE_0__.left((0,_common_js__WEBPACK_IMPORTED_MODULE_1__.DecodeException)(str, e instanceof Error ? e.message : \"Invalid input\"));\n  }\n};\n/** @internal */\nconst bytesToHex = [\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"0a\", \"0b\", \"0c\", \"0d\", \"0e\", \"0f\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"1a\", \"1b\", \"1c\", \"1d\", \"1e\", \"1f\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"2a\", \"2b\", \"2c\", \"2d\", \"2e\", \"2f\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"3a\", \"3b\", \"3c\", \"3d\", \"3e\", \"3f\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"4a\", \"4b\", \"4c\", \"4d\", \"4e\", \"4f\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"5a\", \"5b\", \"5c\", \"5d\", \"5e\", \"5f\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"6a\", \"6b\", \"6c\", \"6d\", \"6e\", \"6f\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"7a\", \"7b\", \"7c\", \"7d\", \"7e\", \"7f\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"8a\", \"8b\", \"8c\", \"8d\", \"8e\", \"8f\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"9a\", \"9b\", \"9c\", \"9d\", \"9e\", \"9f\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\", \"aa\", \"ab\", \"ac\", \"ad\", \"ae\", \"af\", \"b0\", \"b1\", \"b2\", \"b3\", \"b4\", \"b5\", \"b6\", \"b7\", \"b8\", \"b9\", \"ba\", \"bb\", \"bc\", \"bd\", \"be\", \"bf\", \"c0\", \"c1\", \"c2\", \"c3\", \"c4\", \"c5\", \"c6\", \"c7\", \"c8\", \"c9\", \"ca\", \"cb\", \"cc\", \"cd\", \"ce\", \"cf\", \"d0\", \"d1\", \"d2\", \"d3\", \"d4\", \"d5\", \"d6\", \"d7\", \"d8\", \"d9\", \"da\", \"db\", \"dc\", \"dd\", \"de\", \"df\", \"e0\", \"e1\", \"e2\", \"e3\", \"e4\", \"e5\", \"e6\", \"e7\", \"e8\", \"e9\", \"ea\", \"eb\", \"ec\", \"ed\", \"ee\", \"ef\", \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \"f9\", \"fa\", \"fb\", \"fc\", \"fd\", \"fe\", \"ff\"];\n/** @internal */\nconst fromHexChar = byte => {\n  // '0' <= byte && byte <= '9'\n  if (48 <= byte && byte <= 57) {\n    return byte - 48;\n  }\n  // 'a' <= byte && byte <= 'f'\n  if (97 <= byte && byte <= 102) {\n    return byte - 97 + 10;\n  }\n  // 'A' <= byte && byte <= 'F'\n  if (65 <= byte && byte <= 70) {\n    return byte - 65 + 10;\n  }\n  throw new TypeError(\"Invalid input\");\n};\n//# sourceMappingURL=hex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2hleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0k7QUFDOUM7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsV0FBVyw0Q0FBVyxDQUFDLDJEQUFlLGdEQUFnRCxhQUFhO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZDQUFZO0FBQ3ZCLElBQUk7QUFDSixXQUFXLDRDQUFXLENBQUMsMkRBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZS1sZWFybmluZy13ZWJhcHBsaWNhdGlvbi1sbXMvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VuY29kaW5nL2hleC5qcz9jMDVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVpdGhlciBmcm9tIFwiLi4vLi4vRWl0aGVyLmpzXCI7XG5pbXBvcnQgeyBEZWNvZGVFeGNlcHRpb24gfSBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBlbmNvZGUgPSBieXRlcyA9PiB7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgcmVzdWx0ICs9IGJ5dGVzVG9IZXhbYnl0ZXNbaV1dO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IHN0ciA9PiB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIGlmIChieXRlcy5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgcmV0dXJuIEVpdGhlci5sZWZ0KERlY29kZUV4Y2VwdGlvbihzdHIsIGBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDIsIGJ1dCBpcyAke2J5dGVzLmxlbmd0aH1gKSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBsZW5ndGggPSBieXRlcy5sZW5ndGggLyAyO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYSA9IGZyb21IZXhDaGFyKGJ5dGVzW2kgKiAyXSk7XG4gICAgICBjb25zdCBiID0gZnJvbUhleENoYXIoYnl0ZXNbaSAqIDIgKyAxXSk7XG4gICAgICByZXN1bHRbaV0gPSBhIDw8IDQgfCBiO1xuICAgIH1cbiAgICByZXR1cm4gRWl0aGVyLnJpZ2h0KHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gRWl0aGVyLmxlZnQoRGVjb2RlRXhjZXB0aW9uKHN0ciwgZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogXCJJbnZhbGlkIGlucHV0XCIpKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGJ5dGVzVG9IZXggPSBbXCIwMFwiLCBcIjAxXCIsIFwiMDJcIiwgXCIwM1wiLCBcIjA0XCIsIFwiMDVcIiwgXCIwNlwiLCBcIjA3XCIsIFwiMDhcIiwgXCIwOVwiLCBcIjBhXCIsIFwiMGJcIiwgXCIwY1wiLCBcIjBkXCIsIFwiMGVcIiwgXCIwZlwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiLCBcIjEzXCIsIFwiMTRcIiwgXCIxNVwiLCBcIjE2XCIsIFwiMTdcIiwgXCIxOFwiLCBcIjE5XCIsIFwiMWFcIiwgXCIxYlwiLCBcIjFjXCIsIFwiMWRcIiwgXCIxZVwiLCBcIjFmXCIsIFwiMjBcIiwgXCIyMVwiLCBcIjIyXCIsIFwiMjNcIiwgXCIyNFwiLCBcIjI1XCIsIFwiMjZcIiwgXCIyN1wiLCBcIjI4XCIsIFwiMjlcIiwgXCIyYVwiLCBcIjJiXCIsIFwiMmNcIiwgXCIyZFwiLCBcIjJlXCIsIFwiMmZcIiwgXCIzMFwiLCBcIjMxXCIsIFwiMzJcIiwgXCIzM1wiLCBcIjM0XCIsIFwiMzVcIiwgXCIzNlwiLCBcIjM3XCIsIFwiMzhcIiwgXCIzOVwiLCBcIjNhXCIsIFwiM2JcIiwgXCIzY1wiLCBcIjNkXCIsIFwiM2VcIiwgXCIzZlwiLCBcIjQwXCIsIFwiNDFcIiwgXCI0MlwiLCBcIjQzXCIsIFwiNDRcIiwgXCI0NVwiLCBcIjQ2XCIsIFwiNDdcIiwgXCI0OFwiLCBcIjQ5XCIsIFwiNGFcIiwgXCI0YlwiLCBcIjRjXCIsIFwiNGRcIiwgXCI0ZVwiLCBcIjRmXCIsIFwiNTBcIiwgXCI1MVwiLCBcIjUyXCIsIFwiNTNcIiwgXCI1NFwiLCBcIjU1XCIsIFwiNTZcIiwgXCI1N1wiLCBcIjU4XCIsIFwiNTlcIiwgXCI1YVwiLCBcIjViXCIsIFwiNWNcIiwgXCI1ZFwiLCBcIjVlXCIsIFwiNWZcIiwgXCI2MFwiLCBcIjYxXCIsIFwiNjJcIiwgXCI2M1wiLCBcIjY0XCIsIFwiNjVcIiwgXCI2NlwiLCBcIjY3XCIsIFwiNjhcIiwgXCI2OVwiLCBcIjZhXCIsIFwiNmJcIiwgXCI2Y1wiLCBcIjZkXCIsIFwiNmVcIiwgXCI2ZlwiLCBcIjcwXCIsIFwiNzFcIiwgXCI3MlwiLCBcIjczXCIsIFwiNzRcIiwgXCI3NVwiLCBcIjc2XCIsIFwiNzdcIiwgXCI3OFwiLCBcIjc5XCIsIFwiN2FcIiwgXCI3YlwiLCBcIjdjXCIsIFwiN2RcIiwgXCI3ZVwiLCBcIjdmXCIsIFwiODBcIiwgXCI4MVwiLCBcIjgyXCIsIFwiODNcIiwgXCI4NFwiLCBcIjg1XCIsIFwiODZcIiwgXCI4N1wiLCBcIjg4XCIsIFwiODlcIiwgXCI4YVwiLCBcIjhiXCIsIFwiOGNcIiwgXCI4ZFwiLCBcIjhlXCIsIFwiOGZcIiwgXCI5MFwiLCBcIjkxXCIsIFwiOTJcIiwgXCI5M1wiLCBcIjk0XCIsIFwiOTVcIiwgXCI5NlwiLCBcIjk3XCIsIFwiOThcIiwgXCI5OVwiLCBcIjlhXCIsIFwiOWJcIiwgXCI5Y1wiLCBcIjlkXCIsIFwiOWVcIiwgXCI5ZlwiLCBcImEwXCIsIFwiYTFcIiwgXCJhMlwiLCBcImEzXCIsIFwiYTRcIiwgXCJhNVwiLCBcImE2XCIsIFwiYTdcIiwgXCJhOFwiLCBcImE5XCIsIFwiYWFcIiwgXCJhYlwiLCBcImFjXCIsIFwiYWRcIiwgXCJhZVwiLCBcImFmXCIsIFwiYjBcIiwgXCJiMVwiLCBcImIyXCIsIFwiYjNcIiwgXCJiNFwiLCBcImI1XCIsIFwiYjZcIiwgXCJiN1wiLCBcImI4XCIsIFwiYjlcIiwgXCJiYVwiLCBcImJiXCIsIFwiYmNcIiwgXCJiZFwiLCBcImJlXCIsIFwiYmZcIiwgXCJjMFwiLCBcImMxXCIsIFwiYzJcIiwgXCJjM1wiLCBcImM0XCIsIFwiYzVcIiwgXCJjNlwiLCBcImM3XCIsIFwiYzhcIiwgXCJjOVwiLCBcImNhXCIsIFwiY2JcIiwgXCJjY1wiLCBcImNkXCIsIFwiY2VcIiwgXCJjZlwiLCBcImQwXCIsIFwiZDFcIiwgXCJkMlwiLCBcImQzXCIsIFwiZDRcIiwgXCJkNVwiLCBcImQ2XCIsIFwiZDdcIiwgXCJkOFwiLCBcImQ5XCIsIFwiZGFcIiwgXCJkYlwiLCBcImRjXCIsIFwiZGRcIiwgXCJkZVwiLCBcImRmXCIsIFwiZTBcIiwgXCJlMVwiLCBcImUyXCIsIFwiZTNcIiwgXCJlNFwiLCBcImU1XCIsIFwiZTZcIiwgXCJlN1wiLCBcImU4XCIsIFwiZTlcIiwgXCJlYVwiLCBcImViXCIsIFwiZWNcIiwgXCJlZFwiLCBcImVlXCIsIFwiZWZcIiwgXCJmMFwiLCBcImYxXCIsIFwiZjJcIiwgXCJmM1wiLCBcImY0XCIsIFwiZjVcIiwgXCJmNlwiLCBcImY3XCIsIFwiZjhcIiwgXCJmOVwiLCBcImZhXCIsIFwiZmJcIiwgXCJmY1wiLCBcImZkXCIsIFwiZmVcIiwgXCJmZlwiXTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGZyb21IZXhDaGFyID0gYnl0ZSA9PiB7XG4gIC8vICcwJyA8PSBieXRlICYmIGJ5dGUgPD0gJzknXG4gIGlmICg0OCA8PSBieXRlICYmIGJ5dGUgPD0gNTcpIHtcbiAgICByZXR1cm4gYnl0ZSAtIDQ4O1xuICB9XG4gIC8vICdhJyA8PSBieXRlICYmIGJ5dGUgPD0gJ2YnXG4gIGlmICg5NyA8PSBieXRlICYmIGJ5dGUgPD0gMTAyKSB7XG4gICAgcmV0dXJuIGJ5dGUgLSA5NyArIDEwO1xuICB9XG4gIC8vICdBJyA8PSBieXRlICYmIGJ5dGUgPD0gJ0YnXG4gIGlmICg2NSA8PSBieXRlICYmIGJ5dGUgPD0gNzApIHtcbiAgICByZXR1cm4gYnl0ZSAtIDY1ICsgMTA7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgaW5wdXRcIik7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/encoding/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBugErrorMessage: () => (/* binding */ getBugErrorMessage)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */\n/** @internal */\nconst getBugErrorMessage = message => `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyw4Q0FBOEMsU0FBUztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lcnJvcnMuanM/NzZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0QnVnRXJyb3JNZXNzYWdlID0gbWVzc2FnZSA9PiBgQlVHOiAke21lc3NhZ2V9IC0gcGxlYXNlIHJlcG9ydCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vRWZmZWN0LVRTL2VmZmVjdC9pc3N1ZXNgO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/opCodes/effect.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OP_ASYNC: () => (/* binding */ OP_ASYNC),\n/* harmony export */   OP_COMMIT: () => (/* binding */ OP_COMMIT),\n/* harmony export */   OP_FAILURE: () => (/* binding */ OP_FAILURE),\n/* harmony export */   OP_ON_FAILURE: () => (/* binding */ OP_ON_FAILURE),\n/* harmony export */   OP_ON_SUCCESS: () => (/* binding */ OP_ON_SUCCESS),\n/* harmony export */   OP_ON_SUCCESS_AND_FAILURE: () => (/* binding */ OP_ON_SUCCESS_AND_FAILURE),\n/* harmony export */   OP_REVERT_FLAGS: () => (/* binding */ OP_REVERT_FLAGS),\n/* harmony export */   OP_SUCCESS: () => (/* binding */ OP_SUCCESS),\n/* harmony export */   OP_SYNC: () => (/* binding */ OP_SYNC),\n/* harmony export */   OP_TAG: () => (/* binding */ OP_TAG),\n/* harmony export */   OP_UPDATE_RUNTIME_FLAGS: () => (/* binding */ OP_UPDATE_RUNTIME_FLAGS),\n/* harmony export */   OP_WHILE: () => (/* binding */ OP_WHILE),\n/* harmony export */   OP_WITH_RUNTIME: () => (/* binding */ OP_WITH_RUNTIME),\n/* harmony export */   OP_YIELD: () => (/* binding */ OP_YIELD)\n/* harmony export */ });\n/** @internal */\nconst OP_ASYNC = \"Async\";\n/** @internal */\nconst OP_COMMIT = \"Commit\";\n/** @internal */\nconst OP_FAILURE = \"Failure\";\n/** @internal */\nconst OP_ON_FAILURE = \"OnFailure\";\n/** @internal */\nconst OP_ON_SUCCESS = \"OnSuccess\";\n/** @internal */\nconst OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\";\n/** @internal */\nconst OP_SUCCESS = \"Success\";\n/** @internal */\nconst OP_SYNC = \"Sync\";\n/** @internal */\nconst OP_TAG = \"Tag\";\n/** @internal */\nconst OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\";\n/** @internal */\nconst OP_WHILE = \"While\";\n/** @internal */\nconst OP_WITH_RUNTIME = \"WithRuntime\";\n/** @internal */\nconst OP_YIELD = \"Yield\";\n/** @internal */\nconst OP_REVERT_FLAGS = \"RevertFlags\";\n//# sourceMappingURL=effect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wQ29kZXMvZWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcENvZGVzL2VmZmVjdC5qcz80NDlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9BU1lOQyA9IFwiQXN5bmNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9DT01NSVQgPSBcIkNvbW1pdFwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX0ZBSUxVUkUgPSBcIkZhaWx1cmVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9GQUlMVVJFID0gXCJPbkZhaWx1cmVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9TVUNDRVNTID0gXCJPblN1Y2Nlc3NcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9TVUNDRVNTX0FORF9GQUlMVVJFID0gXCJPblN1Y2Nlc3NBbmRGYWlsdXJlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfU1VDQ0VTUyA9IFwiU3VjY2Vzc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1NZTkMgPSBcIlN5bmNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9UQUcgPSBcIlRhZ1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1VQREFURV9SVU5USU1FX0ZMQUdTID0gXCJVcGRhdGVSdW50aW1lRmxhZ3NcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9XSElMRSA9IFwiV2hpbGVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9XSVRIX1JVTlRJTUUgPSBcIldpdGhSdW50aW1lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfWUlFTEQgPSBcIllpZWxkXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfUkVWRVJUX0ZMQUdTID0gXCJSZXZlcnRGbGFnc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/option.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/option.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   some: () => (/* binding */ some)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\nconst CommonProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  [TypeId]: {\n    _A: _ => _\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  }\n};\nconst SomeProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isOption(that) && isSome(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.value, that.value);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.value)));\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.value)\n    };\n  }\n});\nconst NoneHash = /*#__PURE__*/_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(\"None\");\nconst NoneProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isOption(that) && isNone(that);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return NoneHash;\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    };\n  }\n});\n/** @internal */\nconst isOption = input => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */\nconst isNone = fa => fa._tag === \"None\";\n/** @internal */\nconst isSome = fa => fa._tag === \"Some\";\n/** @internal */\nconst none = /*#__PURE__*/Object.create(NoneProto);\n/** @internal */\nconst some = value => {\n  const a = Object.create(SomeProto);\n  a.value = value;\n  return a;\n};\n//# sourceMappingURL=option.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3FDO0FBQ0Y7QUFDbUM7QUFDeEI7QUFDSTtBQUNsRDtBQUNBO0FBQ0EsS0FBSywyREFBZTtBQUNwQjtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUcsOERBQWlCO0FBQ3BCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsV0FBVyx1REFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmLDZDQUE2Qyw2Q0FBWTtBQUN6RCxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkLFdBQVcsNENBQVcsT0FBTyw2Q0FBWSxDQUFDLDBDQUFTLGFBQWEsMENBQVM7QUFDekUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1REFBTTtBQUNuQjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhCQUE4QiwwQ0FBUztBQUN2QztBQUNBO0FBQ0E7QUFDQSxHQUFHLDZDQUFZO0FBQ2Y7QUFDQSxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPLDBCQUEwQiwwREFBVztBQUM1QztBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2UtbGVhcm5pbmctd2ViYXBwbGljYXRpb24tbG1zLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcHRpb24uanM/Y2UyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5pbXBvcnQgKiBhcyBFcXVhbCBmcm9tIFwiLi4vRXF1YWwuanNcIjtcbmltcG9ydCAqIGFzIEhhc2ggZnJvbSBcIi4uL0hhc2guanNcIjtcbmltcG9ydCB7IGZvcm1hdCwgTm9kZUluc3BlY3RTeW1ib2wsIHRvSlNPTiB9IGZyb20gXCIuLi9JbnNwZWN0YWJsZS5qc1wiO1xuaW1wb3J0IHsgaGFzUHJvcGVydHkgfSBmcm9tIFwiLi4vUHJlZGljYXRlLmpzXCI7XG5pbXBvcnQgeyBFZmZlY3RQcm90b3R5cGUgfSBmcm9tIFwiLi9lZmZlY3RhYmxlLmpzXCI7XG5jb25zdCBUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9PcHRpb25cIik7XG5jb25zdCBDb21tb25Qcm90byA9IHtcbiAgLi4uRWZmZWN0UHJvdG90eXBlLFxuICBbVHlwZUlkXToge1xuICAgIF9BOiBfID0+IF9cbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfSxcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufTtcbmNvbnN0IFNvbWVQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJTb21lXCIsXG4gIF9vcDogXCJTb21lXCIsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNPcHRpb24odGhhdCkgJiYgaXNTb21lKHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLnZhbHVlLCB0aGF0LnZhbHVlKTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5jb21iaW5lKEhhc2guaGFzaCh0aGlzLl90YWcpKShIYXNoLmhhc2godGhpcy52YWx1ZSkpKTtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6IFwiT3B0aW9uXCIsXG4gICAgICBfdGFnOiB0aGlzLl90YWcsXG4gICAgICB2YWx1ZTogdG9KU09OKHRoaXMudmFsdWUpXG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBOb25lSGFzaCA9IC8qI19fUFVSRV9fKi9IYXNoLmhhc2goXCJOb25lXCIpO1xuY29uc3QgTm9uZVByb3RvID0gLyojX19QVVJFX18qL09iamVjdC5hc3NpZ24oIC8qI19fUFVSRV9fKi9PYmplY3QuY3JlYXRlKENvbW1vblByb3RvKSwge1xuICBfdGFnOiBcIk5vbmVcIixcbiAgX29wOiBcIk5vbmVcIixcbiAgW0VxdWFsLnN5bWJvbF0odGhhdCkge1xuICAgIHJldHVybiBpc09wdGlvbih0aGF0KSAmJiBpc05vbmUodGhhdCk7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIE5vbmVIYXNoO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJPcHRpb25cIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZ1xuICAgIH07XG4gIH1cbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzT3B0aW9uID0gaW5wdXQgPT4gaGFzUHJvcGVydHkoaW5wdXQsIFR5cGVJZCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNOb25lID0gZmEgPT4gZmEuX3RhZyA9PT0gXCJOb25lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNTb21lID0gZmEgPT4gZmEuX3RhZyA9PT0gXCJTb21lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3Qgbm9uZSA9IC8qI19fUFVSRV9fKi9PYmplY3QuY3JlYXRlKE5vbmVQcm90byk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3Qgc29tZSA9IHZhbHVlID0+IHtcbiAgY29uc3QgYSA9IE9iamVjdC5jcmVhdGUoU29tZVByb3RvKTtcbiAgYS52YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gYTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js":
/*!****************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/singleShotGen.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SingleShotGen: () => (/* binding */ SingleShotGen)\n/* harmony export */ });\n/** @internal */\nclass SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  throw(e) {\n    throw e;\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n//# sourceMappingURL=singleShotGen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3NpbmdsZVNob3RHZW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvc2luZ2xlU2hvdEdlbi5qcz9hMjFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBTaW5nbGVTaG90R2VuIHtcbiAgc2VsZjtcbiAgY2FsbGVkID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKHNlbGYpIHtcbiAgICB0aGlzLnNlbGYgPSBzZWxmO1xuICB9XG4gIG5leHQoYSkge1xuICAgIHJldHVybiB0aGlzLmNhbGxlZCA/IHtcbiAgICAgIHZhbHVlOiBhLFxuICAgICAgZG9uZTogdHJ1ZVxuICAgIH0gOiAodGhpcy5jYWxsZWQgPSB0cnVlLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zZWxmLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4oYSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogYSxcbiAgICAgIGRvbmU6IHRydWVcbiAgICB9O1xuICB9XG4gIHRocm93KGUpIHtcbiAgICB0aHJvdyBlO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBuZXcgU2luZ2xlU2hvdEdlbih0aGlzLnNlbGYpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW5nbGVTaG90R2VuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/version.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/version.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentVersion: () => (/* binding */ getCurrentVersion),\n/* harmony export */   setCurrentVersion: () => (/* binding */ setCurrentVersion)\n/* harmony export */ });\nlet moduleVersion = \"3.7.2\";\nconst getCurrentVersion = () => moduleVersion;\nconst setCurrentVersion = version => {\n  moduleVersion = version;\n};\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lLWxlYXJuaW5nLXdlYmFwcGxpY2F0aW9uLWxtcy8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvdmVyc2lvbi5qcz82MTFhIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBtb2R1bGVWZXJzaW9uID0gXCIzLjcuMlwiO1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRWZXJzaW9uID0gKCkgPT4gbW9kdWxlVmVyc2lvbjtcbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50VmVyc2lvbiA9IHZlcnNpb24gPT4ge1xuICBtb2R1bGVWZXJzaW9uID0gdmVyc2lvbjtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/version.js\n");

/***/ })

};
;